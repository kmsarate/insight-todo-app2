{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\Insight-todo-app2\\\\insight-todo-app2\\\\insight-todo-app-INS-015\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Routes, Route, useNavigate } from \"react-router-dom\";\nimport { useState, useEffect, useLayoutEffect } from \"react\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\"; // Pages\n\nimport Home from \"./pages/Home\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/login\";\nimport Profile from \"./pages/Profile\"; //Style\n\nimport \"./App.css\"; // db\n\nimport db from \"./utils/db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntoast.configure();\n\nconst App = () => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\n    const loggedIn = sessionStorage.getItem(\"isLoggedIn\");\n    return loggedIn ? JSON.parse(loggedIn) : [];\n  });\n  const [sessionId, setSessionId] = useState(() => {\n    const id = sessionStorage.getItem(\"sessionId\");\n    return id ? JSON.parse(id) : [];\n  });\n  const [load, setLoad] = useState(false);\n\n  const notify = (_message, _state) => {\n    if (_state === \"error\") toast.error(_message);else if (_state === \"success\") toast.success(_message);\n  };\n\n  const isLoggedInHandler = () => {\n    setIsLoggedIn(!isLoggedIn);\n  };\n\n  const taskList = useLiveQuery(() => db.tasks.where(\"userid\").equals(sessionId).toArray());\n  const [filter, setFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"taskname\");\n\n  const filterHandling = () => {\n    let current = new Date();\n    let yearNow = `${current.getFullYear()}`;\n    let monthNow = `0${current.getMonth() + 1}`;\n    let dayNow = `${current.getDate()}`;\n    if (monthNow === \"10\" || monthNow === \"11\" || monthNow === \"10\") monthNow = `${current.getMonth() + 1}`;\n    const dateNow = yearNow + \"-\" + monthNow + \"-\" + dayNow;\n    let tasks = [];\n\n    if (taskList) {\n      taskList.forEach(todo => {\n        if (filter === \"today\") {\n          tasks = taskList.filter(todo => dateNow >= todo.startDate && dateNow <= todo.endDate);\n        } else {\n          tasks = [...taskList];\n        }\n      });\n    }\n\n    tasks.sort(sortHandler(sortBy));\n    return tasks;\n  };\n\n  const sortHandler = sortBy => (a, b) => a[sortBy].toLowerCase() > b[sortBy].toLowerCase() ? 1 : -1; // Effect\n\n\n  useEffect(() => {\n    sessionStorage.setItem(\"isLoggedIn\", JSON.stringify(isLoggedIn));\n    sessionStorage.setItem(\"sessionId\", JSON.stringify(sessionId));\n  }, [isLoggedIn, sessionId]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Login, {\n            isLoggedInHandler: isLoggedInHandler,\n            isLoggedIn: isLoggedIn,\n            setSessionId: setSessionId,\n            sessionId: sessionId,\n            notify: notify\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:id\",\n          element: /*#__PURE__*/_jsxDEV(Home, {\n            sessionId: sessionId,\n            setSessionId: setSessionId,\n            isLoggedIn: isLoggedIn,\n            isLoggedInHandler: isLoggedInHandler,\n            notify: notify,\n            load: load,\n            setLoad: setLoad,\n            taskList: filterHandling(),\n            filterChangeHandler: setFilter,\n            filter: filter,\n            sortHandler: setSortBy,\n            sortBy: sortBy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          element: /*#__PURE__*/_jsxDEV(Signup, {\n            notify: notify\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/profile/:id\",\n          element: /*#__PURE__*/_jsxDEV(Profile, {\n            sessionId: sessionId,\n            setSessionId: setSessionId,\n            isLoggedIn: isLoggedIn,\n            isLoggedInHandler: isLoggedInHandler,\n            notify: notify,\n            load: load,\n            setLoad: setLoad\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"gRLApi/BnESYew2EXplM72f0sfE=\", false, function () {\n  return [useLiveQuery];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/Insight-todo-app2/insight-todo-app2/insight-todo-app-INS-015/src/App.js"],"names":["BrowserRouter","Router","Routes","Route","useNavigate","useState","useEffect","useLayoutEffect","useLiveQuery","toast","Home","Signup","Login","Profile","db","configure","App","isLoggedIn","setIsLoggedIn","loggedIn","sessionStorage","getItem","JSON","parse","sessionId","setSessionId","id","load","setLoad","notify","_message","_state","error","success","isLoggedInHandler","taskList","tasks","where","equals","toArray","filter","setFilter","sortBy","setSortBy","filterHandling","current","Date","yearNow","getFullYear","monthNow","getMonth","dayNow","getDate","dateNow","forEach","todo","startDate","endDate","sort","sortHandler","a","b","toLowerCase","setItem","stringify"],"mappings":"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","sourcesContent":["import {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  useNavigate,\r\n} from \"react-router-dom\";\r\nimport { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// Pages\r\nimport Home from \"./pages/Home\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Login from \"./pages/login\";\r\nimport Profile from \"./pages/Profile\";\r\n\r\n//Style\r\nimport \"./App.css\";\r\n\r\n// db\r\nimport db from \"./utils/db\";\r\n\r\ntoast.configure();\r\nconst App = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\r\n    const loggedIn = sessionStorage.getItem(\"isLoggedIn\");\r\n    return loggedIn ? JSON.parse(loggedIn) : [];\r\n  });\r\n  const [sessionId, setSessionId] = useState(() => {\r\n    const id = sessionStorage.getItem(\"sessionId\");\r\n    return id ? JSON.parse(id) : [];\r\n  });\r\n  const [load, setLoad] = useState(false);\r\n\r\n  const notify = (_message, _state) => {\r\n    if (_state === \"error\") toast.error(_message);\r\n    else if (_state === \"success\") toast.success(_message);\r\n  };\r\n\r\n  const isLoggedInHandler = () => {\r\n    setIsLoggedIn(!isLoggedIn);\r\n  };\r\n\r\n  const taskList = useLiveQuery(() =>\r\n    db.tasks.where(\"userid\").equals(sessionId).toArray()\r\n  );\r\n\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [sortBy, setSortBy] = useState(\"taskname\");\r\n\r\n  const filterHandling = () => {\r\n    let current = new Date();\r\n    let yearNow = `${current.getFullYear()}`;\r\n    let monthNow = `0${current.getMonth() + 1}`;\r\n    let dayNow = `${current.getDate()}`;\r\n    if (monthNow === \"10\" || monthNow === \"11\" || monthNow === \"10\")\r\n      monthNow = `${current.getMonth() + 1}`;\r\n    const dateNow = yearNow + \"-\" + monthNow + \"-\" + dayNow;\r\n    let tasks = [];\r\n    if (taskList) {\r\n      taskList.forEach((todo) => {\r\n        if (filter === \"today\") {\r\n          tasks = taskList.filter(\r\n            (todo) => dateNow >= todo.startDate && dateNow <= todo.endDate\r\n          );\r\n        } else {\r\n          tasks = [...taskList];\r\n        }\r\n      });\r\n    }\r\n    tasks.sort(sortHandler(sortBy));\r\n    return tasks;\r\n  };\r\n\r\n  const sortHandler = (sortBy) => (a,b) => a[sortBy].toLowerCase() > b[sortBy].toLowerCase() ? 1 : -1;\r\n\r\n  // Effect\r\n  useEffect(() => {\r\n    sessionStorage.setItem(\"isLoggedIn\", JSON.stringify(isLoggedIn));\r\n    sessionStorage.setItem(\"sessionId\", JSON.stringify(sessionId));\r\n  }, [isLoggedIn, sessionId]);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route\r\n            path=\"/\"\r\n            element={\r\n              <Login\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                isLoggedIn={isLoggedIn}\r\n                setSessionId={setSessionId}\r\n                sessionId={sessionId}\r\n                notify={notify}\r\n              />\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/:id\"\r\n            element={\r\n              <Home\r\n                sessionId={sessionId}\r\n                setSessionId={setSessionId}\r\n                isLoggedIn={isLoggedIn}\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                notify={notify}\r\n                load={load}\r\n                setLoad={setLoad}\r\n                taskList={filterHandling()}\r\n                filterChangeHandler={setFilter}\r\n                filter={filter}\r\n                sortHandler={setSortBy}\r\n                sortBy={sortBy}\r\n              />\r\n            }\r\n          />\r\n          <Route path=\"/signup\" element={<Signup notify={notify} />} />\r\n          <Route\r\n            path=\"/profile/:id\"\r\n            element={\r\n              <Profile\r\n                sessionId={sessionId}\r\n                setSessionId={setSessionId}\r\n                isLoggedIn={isLoggedIn}\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                notify={notify}\r\n                load={load}\r\n                setLoad={setLoad}\r\n              />\r\n            }\r\n          />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}