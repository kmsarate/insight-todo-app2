{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('dexie'), require('react')) : typeof define === 'function' && define.amd ? define(['exports', 'dexie', 'react'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.DexieReactHooks = {}, global.Dexie, global.React));\n})(this, function (exports, dexie, React) {\n  'use strict';\n\n  function _interopDefaultLegacy(e) {\n    return e && typeof e === 'object' && 'default' in e ? e : {\n      'default': e\n    };\n  }\n\n  var React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n  function useObservable(observableFactory, arg2, arg3) {\n    // Resolve vars from overloading variants of this function:\n    var deps;\n    var defaultResult;\n\n    if (typeof observableFactory === 'function') {\n      deps = arg2 || [];\n      defaultResult = arg3;\n    } else {\n      deps = [];\n      defaultResult = arg2;\n    } // Create a ref that keeps the state we need\n\n\n    var monitor = React__default['default'].useRef({\n      hasResult: false,\n      result: defaultResult,\n      error: null\n    }); // We control when component should rerender. Make triggerUpdate\n    // as examplified on React's docs at:\n    // https://reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\n\n    var _a = React__default['default'].useReducer(function (x) {\n      return x + 1;\n    }, 0);\n\n    _a[0];\n    var triggerUpdate = _a[1]; // Memoize the observable based on deps\n\n    var observable = React__default['default'].useMemo(function () {\n      // Make it remember previous subscription's default value when\n      // resubscribing.\n      var observable = typeof observableFactory === 'function' ? observableFactory() : observableFactory;\n\n      if (!observable || typeof observable.subscribe !== 'function') {\n        if (observableFactory === observable) {\n          throw new TypeError(\"Given argument to useObservable() was neither a valid observable nor a function.\");\n        } else {\n          throw new TypeError(\"Observable factory given to useObservable() did not return a valid observable.\");\n        }\n      }\n\n      if (!monitor.current.hasResult) {\n        // Optimize for BehaviorSubject and other observables implementing getValue():\n        if (typeof observable.getValue === 'function') {\n          monitor.current.result = observable.getValue();\n          monitor.current.hasResult = true;\n        } else {\n          // Find out if the observable has a current value: try get it by subscribing and\n          // unsubscribing synchronously\n          var subscription = observable.subscribe(function (val) {\n            monitor.current.result = val;\n            monitor.current.hasResult = true;\n          }); // Unsubscribe directly. We only needed any synchronous value if it was possible.\n\n          if (typeof subscription === 'function') {\n            subscription();\n          } else {\n            subscription.unsubscribe();\n          }\n        }\n      }\n\n      return observable;\n    }, deps); // Integrate with react devtools:\n\n    React__default['default'].useDebugValue(monitor.current.result); // Subscribe to the observable\n\n    React__default['default'].useEffect(function () {\n      var subscription = observable.subscribe(function (val) {\n        var current = monitor.current;\n\n        if (current.error !== null || current.result !== val) {\n          current.error = null;\n          current.result = val;\n          current.hasResult = true;\n          triggerUpdate();\n        }\n      }, function (err) {\n        var current = monitor.current;\n\n        if (current.error !== err) {\n          current.error = err;\n          triggerUpdate();\n        }\n      });\n      return typeof subscription === 'function' ? subscription // Support observables that return unsubscribe directly\n      : subscription.unsubscribe.bind(subscription);\n    }, deps); // Throw if observable has emitted error so that\n    // an ErrorBoundrary can catch it\n\n    if (monitor.current.error) throw monitor.current.error; // Return the current result\n\n    return monitor.current.result;\n  }\n\n  function useLiveQuery(querier, deps, defaultResult) {\n    return useObservable(function () {\n      return dexie.liveQuery(querier);\n    }, deps || [], defaultResult);\n  }\n\n  function usePermissions(firstArg, table, obj) {\n    if (!firstArg) throw new TypeError(\"Invalid arguments to usePermissions(): undefined or null\");\n    var db;\n\n    if (arguments.length >= 3) {\n      if (!('transaction' in firstArg)) {\n        // Using ducktyping instead of instanceof in case there are multiple Dexie modules in app.\n        // First arg is  ensures first arg is a Dexie instance\n        throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): 1st arg must be a Dexie instance\");\n      }\n\n      if (typeof table !== 'string') throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): 2nd arg must be string\");\n      if (!obj || typeof obj !== 'object') throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): 3rd arg must be an object\");\n      db = firstArg;\n    } else {\n      if (firstArg instanceof dexie.Dexie) throw new TypeError(\"Invalid arguments to usePermission(db, table, obj): Missing table and obj arguments.\");\n\n      if (typeof firstArg.table === 'function' && typeof firstArg.db === 'object') {\n        db = firstArg.db;\n        obj = firstArg;\n        table = firstArg.table();\n      } else {\n        throw new TypeError(\"Invalid arguments to usePermissions(). \" + \"Expected usePermissions(entity: DexieCloudEntity) or \" + \"usePermissions(db: Dexie, table: string, obj: DexieCloudObject)\");\n      }\n    }\n\n    if (!('cloud' in db)) throw new Error(\"usePermissions() is only for Dexie Cloud but there's no dexie-cloud-addon active in given db.\");\n    if (!('permissions' in db['cloud'])) throw new Error(\"usePermissions() requires a newer version of dexie-cloud-addon. Please upgrade it.\");\n    return useObservable( // @ts-ignore\n    function () {\n      return db.cloud.permissions(obj, table);\n    }, [obj.realmId, obj.owner, table]);\n  }\n\n  exports.useLiveQuery = useLiveQuery;\n  exports.useObservable = useObservable;\n  exports.usePermissions = usePermissions;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"mappings":";;;;;;;;;;;;;WAyBgBA,cACdC,mBAGAC,MACAC,MAAU;;AAGV,QAAIC,IAAJ;AACA,QAAIC,aAAJ;;AACA,QAAI,OAAOJ,iBAAP,KAA6B,UAAjC,EAA6C;AAC3CG,UAAI,GAAGF,IAAI,IAAI,EAAf;AACAG,mBAAa,GAAGF,IAAhB;AACD,KAHD,MAGO;AACLC,UAAI,GAAG,EAAP;AACAC,mBAAa,GAAGH,IAAhB;AACD,KAXS;;;AAcV,QAAMI,OAAO,GAAGC,0BAAMC,MAAND,CAAa;AAC3BE,eAAS,EAAE,KADgB;AAE3BC,YAAM,EAAEL,aAFmB;AAG3BM,WAAK,EAAE;AAHoB,KAAbJ,CAAhB,CAdU;;;;QAsBJK,KAAqBL,0BAAMM,UAANN,CAAiB,UAACO,CAAD,EAAE;AAAK,cAAC,GAAG,CAAJ;AAAK,KAA7BP,EAA+B,CAA/BA;;AAAiCK;AAApD,QAAEG,aAAa,QAAf,CAtBE;;AAyBV,QAAMC,UAAU,GAAGT,0BAAMU,OAANV,CAAc;;;AAG/B,UAAMS,UAAU,GACd,OAAOf,iBAAP,KAA6B,UAA7B,GACIA,iBAAiB,EADrB,GAEIA,iBAHN;;AAIA,UAAI,CAACe,UAAD,IAAe,OAAOA,UAAU,CAACE,SAAlB,KAAgC,UAAnD,EAA+D;AAC7D,YAAIjB,iBAAiB,KAAKe,UAA1B,EAAsC;AACpC,gBAAM,IAAIG,SAAJ,CACJ,kFADI,CAAN;AAGD,SAJD,MAIO;AACL,gBAAM,IAAIA,SAAJ,CACJ,gFADI,CAAN;AAGD;AACF;;AAED,UAAI,CAACb,OAAO,CAACc,OAAR,CAAgBX,SAArB,EAAgC;;AAE9B,YAAI,OAAOO,UAAU,CAACK,QAAlB,KAA+B,UAAnC,EAA+C;AAC7Cf,iBAAO,CAACc,OAAR,CAAgBV,MAAhB,GAAyBM,UAAU,CAACK,QAAX,EAAzB;AACAf,iBAAO,CAACc,OAAR,CAAgBX,SAAhB,GAA4B,IAA5B;AACD,SAHD,MAGO;;;AAGL,cAAMa,YAAY,GAAGN,UAAU,CAACE,SAAX,CAAqB,UAACK,GAAD,EAAI;AAC5CjB,mBAAO,CAACc,OAAR,CAAgBV,MAAhB,GAAyBa,GAAzB;AACAjB,mBAAO,CAACc,OAAR,CAAgBX,SAAhB,GAA4B,IAA5B;AACD,WAHoB,CAArB,CAHK;;AAQL,cAAI,OAAOa,YAAP,KAAwB,UAA5B,EAAwC;AACtCA,wBAAY;AACb,WAFD,MAEO;AACLA,wBAAY,CAACE,WAAb;AACD;AACF;AACF;;AACD,aAAOR,UAAP;AACD,KAxCkBT,EAwChBH,IAxCgBG,CAAnB,CAzBU;;AAoEVA,8BAAMkB,aAANlB,CAAoBD,OAAO,CAACc,OAAR,CAAgBV,MAApCH,EApEU;;AAuEVA,8BAAMmB,SAANnB,CAAgB;AACd,UAAMe,YAAY,GAAGN,UAAU,CAACE,SAAX,CACnB,UAACK,GAAD,EAAI;AACM,mBAAO,GAAKjB,OAAO,QAAnB;;AACR,YAAIc,OAAO,CAACT,KAAR,KAAkB,IAAlB,IAA0BS,OAAO,CAACV,MAAR,KAAmBa,GAAjD,EAAsD;AACpDH,iBAAO,CAACT,KAAR,GAAgB,IAAhB;AACAS,iBAAO,CAACV,MAAR,GAAiBa,GAAjB;AACAH,iBAAO,CAACX,SAAR,GAAoB,IAApB;AACAM,uBAAa;AACd;AACF,OATkB,EAUnB,UAACY,GAAD,EAAI;AACM,mBAAO,GAAKrB,OAAO,QAAnB;;AACR,YAAIc,OAAO,CAACT,KAAR,KAAkBgB,GAAtB,EAA2B;AACzBP,iBAAO,CAACT,KAAR,GAAgBgB,GAAhB;AACAZ,uBAAa;AACd;AACF,OAhBkB,CAArB;AAkBA,aAAO,OAAOO,YAAP,KAAwB,UAAxB,GACHA,YADG,CACS;AADT,QAEHA,YAAY,CAACE,WAAb,CAAyBI,IAAzB,CAA8BN,YAA9B,CAFJ;AAGD,KAtBDf,EAsBGH,IAtBHG,EAvEU;;;AAiGV,QAAID,OAAO,CAACc,OAAR,CAAgBT,KAApB,EAA2B,MAAML,OAAO,CAACc,OAAR,CAAgBT,KAAtB,CAjGjB;;AAoGV,WAAOL,OAAO,CAACc,OAAR,CAAgBV,MAAvB;AACF;;WCvHgBmB,aACdC,SACA1B,MACAC,eAAwB;AAExB,WAAOL,aAAa,CAClB;AAAM,6BAAU8B,OAAVC;AAAkB,KADN,EAElB3B,IAAI,IAAI,EAFU,EAGlBC,aAHkB,CAApB;AAKF;;WCIgB2B,eACdC,UAQAC,OACAC,KAA0C;AAE1C,QAAI,CAACF,QAAL,EACE,MAAM,IAAId,SAAJ,CACJ,0DADI,CAAN;AAGF,QAAIiB,EAAJ;;AACA,QAAIC,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;AACzB,UAAI,EAAE,iBAAiBL,QAAnB,CAAJ,EAAkC;;;AAGhC,cAAM,IAAId,SAAJ,CACJ,sFADI,CAAN;AAGD;;AACD,UAAI,OAAOe,KAAP,KAAiB,QAArB,EACE,MAAM,IAAIf,SAAJ,CACJ,4EADI,CAAN;AAGF,UAAI,CAACgB,GAAD,IAAQ,OAAOA,GAAP,KAAe,QAA3B,EACE,MAAM,IAAIhB,SAAJ,CACJ,+EADI,CAAN;AAGFiB,QAAE,GAAGH,QAAL;AACD,KAjBD,MAiBO;AACL,UAAIA,QAAQ,YAAYM,WAAxB,EACE,MAAM,IAAIpB,SAAJ,CACJ,sFADI,CAAN;;AAIF,UACE,OAAOc,QAAQ,CAACC,KAAhB,KAA0B,UAA1B,IACA,OAAOD,QAAQ,CAACG,EAAhB,KAAuB,QAFzB,EAGE;AACAA,UAAE,GAAGH,QAAQ,CAACG,EAAd;AACAD,WAAG,GAAGF,QAAN;AACAC,aAAK,GAAGD,QAAQ,CAACC,KAAT,EAAR;AACD,OAPD,MAOO;AACL,cAAM,IAAIf,SAAJ,CACJ,4CACE,uDADF,GAEE,iEAHE,CAAN;AAKD;AACF;;AACD,QAAI,EAAE,WAAWiB,EAAb,CAAJ,EACE,MAAM,IAAII,KAAJ,CACJ,+FADI,CAAN;AAGF,QAAI,EAAE,iBAAiBJ,EAAE,CAAC,OAAD,CAArB,CAAJ,EACE,MAAM,IAAII,KAAJ,CAAU,oFAAV,CAAN;AACF,WAAOxC,aAAa;AAElB;AAAM,eAAE,CAACyC,KAAH,CAASC,WAAT,CAAqBP,GAArB,EAA0BD,KAA1B;AAAgC,KAFpB,EAGlB,CAACC,GAAG,CAACQ,OAAL,EAAcR,GAAG,CAACS,KAAlB,EAAyBV,KAAzB,CAHkB,CAApB;AAKF","names":["useObservable","observableFactory","arg2","arg3","deps","defaultResult","monitor","React","useRef","hasResult","result","error","_a","useReducer","x","triggerUpdate","observable","useMemo","subscribe","TypeError","current","getValue","subscription","val","unsubscribe","useDebugValue","useEffect","err","bind","useLiveQuery","querier","liveQuery","usePermissions","firstArg","table","obj","db","arguments","length","Dexie","Error","cloud","permissions","realmId","owner"],"sources":["C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-015\\node_modules\\dexie-react-hooks\\src\\useObservable.ts","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-015\\node_modules\\dexie-react-hooks\\src\\useLiveQuery.ts","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-015\\node_modules\\dexie-react-hooks\\src\\usePermissions.ts"],"sourcesContent":["import React from 'react';\nexport interface InteropableObservable<T> {\n  subscribe(\n    onNext: (x: T) => any,\n    onError?: (error: any) => any\n  ): (() => any) | { unsubscribe(): any };\n  getValue?(): T;\n}\n\nexport function useObservable<T, TDefault>(\n  observable: InteropableObservable<T>\n): T | undefined;\nexport function useObservable<T, TDefault>(\n  observable: InteropableObservable<T>,\n  defaultResult: TDefault\n): T | TDefault;\nexport function useObservable<T>(\n  observableFactory: () => InteropableObservable<T>,\n  deps?: any[]\n): T | undefined;\nexport function useObservable<T, TDefault>(\n  factory: () => InteropableObservable<T>,\n  deps: any[],\n  defaultResult: TDefault\n): T | TDefault;\nexport function useObservable<T, TDefault>(\n  observableFactory:\n    | InteropableObservable<T>\n    | (() => InteropableObservable<T>),\n  arg2?: any,\n  arg3?: any\n) {\n  // Resolve vars from overloading variants of this function:\n  let deps: any[];\n  let defaultResult: TDefault;\n  if (typeof observableFactory === 'function') {\n    deps = arg2 || [];\n    defaultResult = arg3;\n  } else {\n    deps = [];\n    defaultResult = arg2;\n  }\n\n  // Create a ref that keeps the state we need\n  const monitor = React.useRef({\n    hasResult: false,\n    result: defaultResult as T | TDefault,\n    error: null as any,\n  });\n  // We control when component should rerender. Make triggerUpdate\n  // as examplified on React's docs at:\n  // https://reactjs.org/docs/hooks-faq.html#is-there-something-like-forceupdate\n  const [_, triggerUpdate] = React.useReducer((x) => x + 1, 0);\n\n  // Memoize the observable based on deps\n  const observable = React.useMemo(() => {\n    // Make it remember previous subscription's default value when\n    // resubscribing.\n    const observable =\n      typeof observableFactory === 'function'\n        ? observableFactory()\n        : observableFactory;\n    if (!observable || typeof observable.subscribe !== 'function') {\n      if (observableFactory === observable) {\n        throw new TypeError(\n          `Given argument to useObservable() was neither a valid observable nor a function.`\n        );\n      } else {\n        throw new TypeError(\n          `Observable factory given to useObservable() did not return a valid observable.`\n        );\n      }\n    }\n\n    if (!monitor.current.hasResult) {\n      // Optimize for BehaviorSubject and other observables implementing getValue():\n      if (typeof observable.getValue === 'function') {\n        monitor.current.result = observable.getValue();\n        monitor.current.hasResult = true;\n      } else {\n        // Find out if the observable has a current value: try get it by subscribing and\n        // unsubscribing synchronously\n        const subscription = observable.subscribe((val) => {\n          monitor.current.result = val;\n          monitor.current.hasResult = true;\n        });\n        // Unsubscribe directly. We only needed any synchronous value if it was possible.\n        if (typeof subscription === 'function') {\n          subscription();\n        } else {\n          subscription.unsubscribe();\n        }\n      }\n    }\n    return observable;\n  }, deps);\n\n  // Integrate with react devtools:\n  React.useDebugValue(monitor.current.result);\n\n  // Subscribe to the observable\n  React.useEffect(() => {\n    const subscription = observable.subscribe(\n      (val) => {\n        const { current } = monitor;\n        if (current.error !== null || current.result !== val) {\n          current.error = null;\n          current.result = val;\n          current.hasResult = true;\n          triggerUpdate();\n        }\n      },\n      (err) => {\n        const { current } = monitor;\n        if (current.error !== err) {\n          current.error = err;\n          triggerUpdate();\n        }\n      }\n    );\n    return typeof subscription === 'function'\n      ? subscription // Support observables that return unsubscribe directly\n      : subscription.unsubscribe.bind(subscription);\n  }, deps);\n\n  // Throw if observable has emitted error so that\n  // an ErrorBoundrary can catch it\n  if (monitor.current.error) throw monitor.current.error;\n\n  // Return the current result\n  return monitor.current.result;\n}\n","import { liveQuery } from 'dexie';\nimport { useObservable } from './useObservable';\n\nexport function useLiveQuery<T>(\n  querier: () => Promise<T> | T,\n  deps?: any[]\n): T | undefined;\nexport function useLiveQuery<T, TDefault>(\n  querier: () => Promise<T> | T,\n  deps: any[],\n  defaultResult: TDefault\n): T | TDefault;\nexport function useLiveQuery<T, TDefault>(\n  querier: () => Promise<T> | T,\n  deps?: any[],\n  defaultResult?: TDefault\n): T | TDefault {\n  return useObservable(\n    () => liveQuery(querier),\n    deps || [],\n    defaultResult as TDefault\n  );\n}\n","import { Dexie } from 'dexie';\nimport { useObservable } from './useObservable';\nimport type { KeyPaths, TableProp } from 'dexie';\n\ninterface DexieCloudEntity {\n  table(): string;\n  realmId: string;\n  owner: string;\n}\n\nexport interface PermissionChecker<T, TableName extends string> {\n  add(...tableNames: TableName[]): boolean;\n  update(...props: KeyPaths<T>[]): boolean;\n  delete(): boolean;\n}\n\nexport function usePermissions<T extends DexieCloudEntity>(\n  entity: T\n): PermissionChecker<\n  T,\n  T extends { table: () => infer TableName } ? TableName : string\n>;\nexport function usePermissions<\n  TDB extends Dexie,\n  T extends { realmId: string; owner: string }\n>(db: TDB, table: TableProp<TDB>, obj: T): PermissionChecker<T, TableProp<TDB>>;\nexport function usePermissions(\n  firstArg:\n    | Dexie\n    | {\n        realmId?: string;\n        owner?: string;\n        table?: () => string;\n        readonly db?: Dexie;\n      },\n  table?: string,\n  obj?: { realmId?: string; owner?: string }\n) {\n  if (!firstArg)\n    throw new TypeError(\n      `Invalid arguments to usePermissions(): undefined or null`\n    );\n  let db: Dexie;\n  if (arguments.length >= 3) {\n    if (!('transaction' in firstArg)) {\n      // Using ducktyping instead of instanceof in case there are multiple Dexie modules in app.\n      // First arg is  ensures first arg is a Dexie instance\n      throw new TypeError(\n        `Invalid arguments to usePermission(db, table, obj): 1st arg must be a Dexie instance`\n      );\n    }\n    if (typeof table !== 'string')\n      throw new TypeError(\n        `Invalid arguments to usePermission(db, table, obj): 2nd arg must be string`\n      );\n    if (!obj || typeof obj !== 'object')\n      throw new TypeError(\n        `Invalid arguments to usePermission(db, table, obj): 3rd arg must be an object`\n      );\n    db = firstArg;\n  } else {\n    if (firstArg instanceof Dexie)\n      throw new TypeError(\n        `Invalid arguments to usePermission(db, table, obj): Missing table and obj arguments.`\n      );\n\n    if (\n      typeof firstArg.table === 'function' &&\n      typeof firstArg.db === 'object'\n    ) {\n      db = firstArg.db!;\n      obj = firstArg;\n      table = firstArg.table();\n    } else {\n      throw new TypeError(\n        `Invalid arguments to usePermissions(). ` +\n          `Expected usePermissions(entity: DexieCloudEntity) or ` +\n          `usePermissions(db: Dexie, table: string, obj: DexieCloudObject)`\n      );\n    }\n  }\n  if (!('cloud' in db))\n    throw new Error(\n      `usePermissions() is only for Dexie Cloud but there's no dexie-cloud-addon active in given db.`\n    );\n  if (!('permissions' in db['cloud']))\n    throw new Error(`usePermissions() requires a newer version of dexie-cloud-addon. Please upgrade it.`)\n  return useObservable(\n    // @ts-ignore\n    () => db.cloud.permissions(obj, table),\n    [obj.realmId, obj.owner, table]\n  );\n}\n"]},"metadata":{},"sourceType":"script"}