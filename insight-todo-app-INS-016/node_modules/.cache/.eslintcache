[{"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\index.js":"1","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\App.js":"2","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Home.js":"3","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\login.js":"4","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Signup.js":"5","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Upcoming.js":"6","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Profile.js":"7","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\utils\\db.js":"8","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\navbar.js":"9","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\TaskModal.js":"10","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\button.js":"11","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\Menu.js":"12","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\TaskList.js":"13","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\Dropdown.js":"14","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\input.js":"15","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\ConfirmationModal.js":"16","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\ForgotPassword.js":"17"},{"size":151,"mtime":1651710091031,"results":"18","hashOfConfig":"19"},{"size":4553,"mtime":1651710091023,"results":"20","hashOfConfig":"19"},{"size":6874,"mtime":1651710091032,"results":"21","hashOfConfig":"19"},{"size":3381,"mtime":1651710091034,"results":"22","hashOfConfig":"19"},{"size":5426,"mtime":1651710091033,"results":"23","hashOfConfig":"19"},{"size":3316,"mtime":1652249379503,"results":"24","hashOfConfig":"19"},{"size":9465,"mtime":1651710091033,"results":"25","hashOfConfig":"19"},{"size":328,"mtime":1651710091042,"results":"26","hashOfConfig":"19"},{"size":2140,"mtime":1651710091029,"results":"27","hashOfConfig":"19"},{"size":5050,"mtime":1651710091028,"results":"28","hashOfConfig":"19"},{"size":270,"mtime":1651710091028,"results":"29","hashOfConfig":"19"},{"size":3129,"mtime":1651710091027,"results":"30","hashOfConfig":"19"},{"size":4662,"mtime":1651710091027,"results":"31","hashOfConfig":"19"},{"size":351,"mtime":1651710091025,"results":"32","hashOfConfig":"19"},{"size":732,"mtime":1651710091029,"results":"33","hashOfConfig":"19"},{"size":600,"mtime":1651710091024,"results":"34","hashOfConfig":"19"},{"size":4882,"mtime":1651710091026,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cx2dw7",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\index.js",[],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\App.js",["96","97"],[],"import {\r\n  BrowserRouter as Router,\r\n  Routes,\r\n  Route,\r\n  useNavigate,\r\n} from \"react-router-dom\";\r\nimport { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// Pages\r\nimport Home from \"./pages/Home\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Login from \"./pages/login\";\r\nimport Profile from \"./pages/Profile\";\r\nimport Upcoming from \"./pages/Upcoming\";\r\n\r\n//Style\r\nimport \"./App.css\";\r\n\r\n// db\r\nimport db from \"./utils/db\";\r\n\r\ntoast.configure();\r\nconst App = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\r\n    const loggedIn = sessionStorage.getItem(\"isLoggedIn\");\r\n    return loggedIn ? JSON.parse(loggedIn) : [];\r\n  });\r\n  const [sessionId, setSessionId] = useState(() => {\r\n    const id = sessionStorage.getItem(\"sessionId\");\r\n    return id ? JSON.parse(id) : [];\r\n  });\r\n  const [load, setLoad] = useState(false);\r\n\r\n  const notify = (_message, _state) => {\r\n    if (_state === \"error\") toast.error(_message);\r\n    else if (_state === \"success\") toast.success(_message);\r\n  };\r\n\r\n  const isLoggedInHandler = () => {\r\n    setIsLoggedIn(!isLoggedIn);\r\n  };\r\n\r\n  const taskList = useLiveQuery(() =>\r\n    db.tasks.where(\"userid\").equals(sessionId).toArray()\r\n  );\r\n\r\n  const [filter, setFilter] = useState(\"all\");\r\n  const [sortBy, setSortBy] = useState(\"taskname\");\r\n\r\n  const filterHandling = () => {\r\n    let current = new Date();\r\n    let yearNow = `${current.getFullYear()}`;\r\n    let monthNow = `0${current.getMonth() + 1}`;\r\n    let dayNow = `${current.getDate()}`;\r\n    if (monthNow === \"10\" || monthNow === \"11\" || monthNow === \"10\")\r\n      monthNow = `${current.getMonth() + 1}`;\r\n    const dateNow = yearNow + \"-\" + monthNow + \"-\" + dayNow;\r\n    let tasks = [];\r\n    if (taskList) {\r\n      taskList.forEach((todo) => {\r\n        if (filter === \"today\") {\r\n          tasks = taskList.filter(\r\n            (todo) => dateNow >= todo.startDate && dateNow <= todo.endDate\r\n          );\r\n        } else {\r\n          tasks = [...taskList];\r\n        }\r\n      });\r\n    }\r\n    tasks.sort(sortHandler(sortBy));\r\n    return tasks;\r\n  };\r\n\r\n  const sortHandler = (sortBy) => (a,b) => a[sortBy].toLowerCase() > b[sortBy].toLowerCase() ? 1 : -1;\r\n\r\n  // Effect\r\n  useEffect(() => {\r\n    sessionStorage.setItem(\"isLoggedIn\", JSON.stringify(isLoggedIn));\r\n    sessionStorage.setItem(\"sessionId\", JSON.stringify(sessionId));\r\n  }, [isLoggedIn, sessionId]);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route\r\n            path=\"/\"\r\n            element={\r\n              <Login\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                isLoggedIn={isLoggedIn}\r\n                setSessionId={setSessionId}\r\n                sessionId={sessionId}\r\n                notify={notify}\r\n              />\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/:id\"\r\n            element={\r\n              <Home\r\n                sessionId={sessionId}\r\n                setSessionId={setSessionId}\r\n                isLoggedIn={isLoggedIn}\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                notify={notify}\r\n                load={load}\r\n                setLoad={setLoad}\r\n                taskList={filterHandling()}\r\n                filterChangeHandler={setFilter}\r\n                filter={filter}\r\n                sortHandler={setSortBy}\r\n                sortBy={sortBy}\r\n              />\r\n            }\r\n          />\r\n          <Route path=\"/signup\" element={<Signup notify={notify} />} />\r\n          <Route\r\n            path=\"/upcoming/:id\"\r\n            element={\r\n              <Upcoming\r\n                sessionId={sessionId}\r\n                setSessionId={setSessionId}\r\n                isLoggedIn={isLoggedIn}\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                notify={notify}\r\n                load={load}\r\n                setLoad={setLoad}\r\n              />\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/profile/:id\"\r\n            element={\r\n              <Profile\r\n                sessionId={sessionId}\r\n                setSessionId={setSessionId}\r\n                isLoggedIn={isLoggedIn}\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                notify={notify}\r\n                load={load}\r\n                setLoad={setLoad}\r\n              />\r\n            }\r\n          />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Home.js",["98","99","100","101","102"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n// Components\r\nimport TaskModal from \"../components/TaskModal\";\r\nimport TaskList from \"../components/TaskList\";\r\nimport ConfirmationModal from \"../components/ConfirmationModal\";\r\nimport Menu from \"../components/Menu\";\r\nimport Navbar from \"../components/navbar\";\r\n\r\n// db\r\nimport db from \"../utils/db\";\r\n\r\n// Style\r\nimport \"../styles/Home.css\";\r\nimport Dropdown from \"../components/Dropdown\";\r\n\r\nconst Home = (props) => {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  // Effects;\r\n  useEffect(() => {\r\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\r\n      navigate(\"/\");\r\n      props.setLoad(false);\r\n    } else {\r\n      props.setLoad(true);\r\n    }\r\n  }, [props.isLoggedIn, props.sessionId]);\r\n\r\n  // Display Date\r\n  const current = new Date();\r\n  const dateNow = `${current.getDate()}, ${current.getFullYear()}`;\r\n  const [month, setMonth] = useState(current.getMonth());\r\n  const convertMonth = (month) => {\r\n    if (month === 0) setMonth(\"January\");\r\n    else if (month === 1) setMonth(\"February\");\r\n    else if (month === 2) setMonth(\"March\");\r\n    else if (month === 3) setMonth(\"April\");\r\n    else if (month === 4) setMonth(\"May\");\r\n    else if (month === 5) setMonth(\"June\");\r\n    else if (month === 6) setMonth(\"July\");\r\n    else if (month === 7) setMonth(\"August\");\r\n    else if (month === 8) setMonth(\"September\");\r\n    else if (month === 9) setMonth(\"October\");\r\n    else if (month === 10) setMonth(\"November\");\r\n    else if (month === 11) setMonth(\"December\");\r\n\r\n    return (\r\n      <>\r\n        {day}, {month} {dateNow}{\" \"}\r\n      </>\r\n    );\r\n  };\r\n  const [day, setDay] = useState(current.getDay());\r\n  const convertDay = (day) => {\r\n    if (day === 1) setDay(\"Monday\");\r\n    else if (day === 2) setDay(\"Tuesday\");\r\n    else if (day === 3) setDay(\"Wednesday\");\r\n    else if (day === 4) setDay(\"Thursday\");\r\n    else if (day === 5) setDay(\"Friday\");\r\n    else if (day === 6) setDay(\"Saturday\");\r\n    else if (day === 7) setDay(\"Sunday\");\r\n  };\r\n\r\n  // Functions\r\n  const [edit, setEdit] = useState(false);\r\n  const [editId, setEditId] = useState(0);\r\n  const userid = parseInt(params.id);\r\n\r\n  // Modal\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalState, setModalState] = useState({\r\n    deleteModal: false,\r\n  });\r\n  const [taskId, setTaskId] = useState();\r\n  const modalHandler = () => {\r\n    setEdit(false);\r\n    setShowModal(!showModal);\r\n  };\r\n  const [sortTaskBy, setSortTaskBy] = useState(\"taskname\");\r\n\r\n  // const taskList = useLiveQuery(\r\n  //   () => db.tasks.where(\"userid\").equals(userid).sortBy(sortTaskBy),\r\n  //   [sortTaskBy]\r\n  // );\r\n\r\n  const editHandler = (_id) => {\r\n    if (edit === false) modalHandler();\r\n    setEdit(true);\r\n    setEditId(_id);\r\n  };\r\n\r\n  const updateHandler = (_id) => {\r\n    props.taskList.forEach((task) => {\r\n      if (task.taskid === _id) {\r\n        db.tasks.update(task.taskid, { completed: !task.completed });\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteHandler = (_id) => {\r\n    if (props.taskList !== undefined) {\r\n      props.taskList.forEach((task) => {\r\n        if (task.taskid === _id) {\r\n          db.tasks.delete(task.taskid);\r\n          changeModalState(\"deleteModal\", false);\r\n          props.notify(\"Task Deleted\", \"success\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleConfirmDelete = (_id) => {\r\n    changeModalState(\"deleteModal\", true);\r\n    setTaskId(_id);\r\n  };\r\n\r\n  const changeModalState = (action, value) => {\r\n    setModalState({\r\n      ...modalState,\r\n      [action]: value,\r\n    });\r\n  };\r\n\r\n  const dropdownHandler = (property) => {\r\n    switch (property) {\r\n      case \"Title\":\r\n        property = \"taskname\";\r\n        break;\r\n      case \"Description\":\r\n        property = \"description\";\r\n        break;\r\n      case \"Start Date\":\r\n        property = \"startDate\";\r\n        break;\r\n      case \"End Date\":\r\n        property = \"endDate\";\r\n        break;\r\n    }\r\n    props.sortHandler(property);\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(true);\r\n  const filter = () => {\r\n    let tasks = [];\r\n    if (props.filter === \"filter\") {\r\n      if (props.taskList) {\r\n        props.taskList.forEach((todo) => {\r\n          if (filterState === false) {\r\n            tasks = props.taskList.filter((todo) => !todo.completed);\r\n          } else if (filterState === true) {\r\n            tasks = props.taskList.filter((todo) => todo.completed);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      tasks = [...props.taskList];\r\n    }\r\n    return tasks;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar sessionId={props.sessionId} />\r\n      <Menu\r\n        modalHandler={modalHandler}\r\n        isLoggedInHandler={props.isLoggedInHandler}\r\n        setSessionId={props.setSessionId}\r\n        sessionId={props.sessionId}\r\n        filterChangeHandler={props.filterChangeHandler}\r\n        filter={props.filter}\r\n      />\r\n      <div className=\"home-container\">\r\n        <div className=\"task-bar-header\">\r\n          <h1> {props.filter === \"filter\" ? \"Filters\" : \"Tasks\" }</h1>\r\n          <div className=\"today-taskbar\">\r\n            {props.filter === \"filter\" ? null : (\r\n              <>\r\n                <h1>Today</h1>\r\n                <h5>\r\n                  {convertDay(day)} {convertMonth(month)}\r\n                </h5>\r\n              </>\r\n            )}\r\n          </div>\r\n      \r\n          <Dropdown\r\n            items={[\r\n              { value: \"Title\", id: 1 },\r\n              { value: \"Description\", id: 2 },\r\n              { value: \"Start Date\", id: 3 },\r\n              { value: \"End Date\", id: 4 },\r\n            ]}\r\n            handleClick={dropdownHandler}\r\n          />\r\n          {showModal ? (\r\n            <TaskModal\r\n              modalHandler={modalHandler}\r\n              userid={userid}\r\n              notify={props.notify}\r\n              edit={edit}\r\n              setEdit={setEdit}\r\n              editId={editId}\r\n              taskList={props.taskList}\r\n            />\r\n          ) : null}\r\n          <div>\r\n            <TaskList\r\n              list={filter()}\r\n              updateHandler={updateHandler}\r\n              handleConfirmDelete={handleConfirmDelete}\r\n              editHandler={editHandler}\r\n              filter={props.filter}\r\n              filterState={filterState}\r\n              setFilterState={setFilterState}\r\n            />\r\n          </div>\r\n          <ConfirmationModal\r\n            header=\"Warning\"\r\n            body=\"Are you sure you want to delete this task?\"\r\n            onConfirm={() => deleteHandler(taskId)}\r\n            onHide={() => changeModalState(\"deleteModal\", false)}\r\n            isVisible={modalState.deleteModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\login.js",["103","104"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { Link, useNavigate, NavLink } from \"react-router-dom\";\r\nimport md5 from \"md5\";\r\n\r\n// Components\r\nimport Input from \"../components/input\";\r\nimport Button from \"../components/button\";\r\nimport ForgotPassword from \"../components/ForgotPassword\";\r\n\r\n// db\r\nimport db from \"../utils/db\";\r\n\r\n// Style\r\nimport \"../styles/login.css\";\r\nimport \"../styles/popup.css\";\r\n\r\nconst Login = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    // checked if isLoggedIn is false then redirect to / page\r\n    if (props.isLoggedIn === true && props.sessionId !== \"\") {\r\n      navigate(`/${props.sessionId}`);\r\n    }\r\n  }, [navigate, props.isLoggedIn, props.sessionId]);\r\n\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const usersList = useLiveQuery(() => db.users.toArray());\r\n  const user = db.users.where(\"username\").equalsIgnoreCase(username).toArray();\r\n\r\n  const [forgotPopup, setForgotPopup] = useState(false);\r\n  const popupHandler = () => {\r\n    setForgotPopup(!forgotPopup);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const _val = [];\r\n    usersList.map((item) => {\r\n      _val.push(item.username.toLowerCase());\r\n    });\r\n\r\n    if (_val.includes(username.toLowerCase())) {\r\n      if (user._value[0].password === md5(password)) {\r\n        navigate(`/${user._value[0].userid}`);\r\n        props.isLoggedInHandler();\r\n        props.setSessionId(user._value[0].userid);\r\n      } else {\r\n        props.notify(\"Incorrect password\", \"error\");\r\n      }\r\n    } else {\r\n      props.notify(\"username doesnt exists\", \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <nav className=\"Navbar-Items\">\r\n      <h1 className=\"navbar-logo-login\">To.Do</h1>\r\n    </nav>  \r\n      <ForgotPassword\r\n        popupHandler={popupHandler}\r\n        forgotPopup={forgotPopup}\r\n        notify={props.notify}\r\n      />\r\n      <div className=\"login-wrapper\">\r\n        <div className=\"left-col\">\r\n          <h1>\r\n            Organize your Tasks<br></br>with To.Do\r\n          </h1>\r\n          <img\r\n            className=\"illustration\"\r\n            src=\"assets/images/illustration.png\"\r\n            alt=\"Illustration\"\r\n          />\r\n        </div>\r\n        <img className=\"line\" src=\"assets/images/Line.png\" alt=\"Illustration\" />\r\n        <form className=\"login-form\" onSubmit={handleSubmit}>\r\n          <h2>Login</h2>\r\n          <Input\r\n            type=\"text\"\r\n            label=\"Username\"\r\n            placeholder=\"Enter Username\"\r\n            handleChange={setUsername}\r\n          />\r\n          <Input\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            placeholder=\"Enter Password\"\r\n            handleChange={setPassword}\r\n          />\r\n          <Button type=\"submit\" label=\"Login\" className=\"button\" />\r\n\r\n          <span className=\"login-small-text\">\r\n            <Button\r\n              label=\"Forgot Password\"\r\n              type=\"button\"\r\n              className=\"flat-link\"\r\n              handleClick={popupHandler}\r\n            />\r\n            <p>\r\n              Don't have an account?\r\n              <NavLink to=\"/signup\" className=\"flat-link\"> Signup </NavLink>\r\n            </p>\r\n          </span>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Signup.js",["105","106"],[],"import React, { useState } from \"react\";\r\nimport Input from \"../components/input\";\r\nimport Button from \"../components/button\";\r\nimport db from \"../utils/db\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport * as md5 from \"md5\";\r\nimport { useNavigate, NavLink } from \"react-router-dom\";\r\n\r\nimport \"../styles/signup.css\";\r\nimport \"../styles/popup.css\";\r\n\r\nconst Signup = ({}) => {\r\n  const navigate = useNavigate();\r\n  // States\r\n  const [name, setName] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [securityQuestion, setSecurityQuestion] = useState(\r\n    \"In what city were you born?\"\r\n  );\r\n  const [securityAnswer, setSecurityAnswer] = useState(\"\");\r\n  const [showResult, setShowResult] = useState(false);\r\n  const usersList = useLiveQuery(() => db.users.toArray());\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const _val = [];\r\n    usersList.map((item) => {\r\n      _val.push(item.username.toLowerCase());\r\n    });\r\n    if (_val.includes(username.toLowerCase())) {\r\n      setShowResult(true);\r\n    } else if (\r\n      name !== \"\" &&\r\n      username !== \"\" &&\r\n      password !== \"\" &&\r\n      securityAnswer !== \"\"\r\n    ) {\r\n      let user = {\r\n        name: name,\r\n        username: username,\r\n        password: md5(password),\r\n        securityQuestion: securityQuestion,\r\n        securityAnswer: securityAnswer,\r\n        img: \"none\",\r\n        cover: \"none\"\r\n      };\r\n      db.users.add(user);\r\n      navigate(\"/\");\r\n    }\r\n  };\r\n\r\n  const ErrUsername = () => {\r\n    return <p className=\"signup-yellow-text\">Username Already Taken</p>;\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <nav className=\"Navbar-Items\">\r\n      <h1 className=\"navbar-logo\">To.Do</h1>\r\n      <NavLink to=\"/\" className=\"nav-link\"> \r\n        <Button type=\"submit\" label=\"Login\" className=\"nav-button\" />\r\n      </NavLink>\r\n    </nav> \r\n      <div className=\"container\">\r\n        <div className=\"col2 signup-container\">\r\n          <div className=\"signup-text\">\r\n            <span>To Do app</span>\r\n            <h1>Manage and Prioritize your tasks easier.</h1>\r\n            <p>\r\n            From the small stuff to the big picture, To.Do organizes your tasks so that you will know what to do, why it matters, and how to get it done.\r\n            </p>\r\n          </div>\r\n          <form onSubmit={handleSubmit} className=\"signup-form\">\r\n            <h2>Sign up</h2>\r\n            {showResult ? <ErrUsername /> : null}\r\n            <Input\r\n              type=\"text\"\r\n              label=\"Name\"\r\n              placeholder=\"Enter Name\"\r\n              errorMessage=\"Name should have a minimum of 5 characters\"\r\n              handleChange={setName}\r\n              pattern=\"^[a-zA-Z\\s]{5,150}$\"\r\n            />\r\n            <Input\r\n              type=\"text\"\r\n              label=\"Username\"\r\n              placeholder=\"Enter Username\"\r\n              errorMessage=\"Username should be 6-32 characters and shouldn't include any special character!\"\r\n              handleChange={setUsername}\r\n              pattern=\"^[A-Za-z0-9]{6,32}$\"\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              label=\"Password\"\r\n              placeholder=\"Enter Password\"\r\n              errorMessage=\"Password should be 12-20 characters and include at least 1 lowercase letter, 1 uppercase letter, 1 number and 1 special character\"\r\n              handleChange={setPassword}\r\n              pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{12,20}$\"\r\n            />\r\n            <div className=\"input-container\">\r\n              <label> Question </label>\r\n              <div className=\"arrow-drop\"> </div>\r\n              <select\r\n              className=\"select\"\r\n                onChange={(e) => {\r\n                  const selectedQuestion = e.target.value;\r\n                  setSecurityQuestion(selectedQuestion);\r\n                }}\r\n              >\r\n                <option value=\"In what city were you born?\">\r\n                  In what city were you born?\r\n                </option>\r\n                <option value=\"What is the name of your favorite pet?\">\r\n                  What is the name of your favorite pet?\r\n                </option>\r\n                <option value=\"What is your mother's maiden name?\">\r\n                  What is your mother's maiden name?\r\n                </option>\r\n                <option value=\"What was your favorite food as a child?\">\r\n                  What was your favorite food as a child?\r\n                </option>\r\n                <option value=\"IWhat is the name of your first school?\">\r\n                  What is the name of your first school?\r\n                </option>\r\n              </select>\r\n            </div>\r\n            <Input\r\n              type=\"text\"\r\n              label=\"Answer\"\r\n              placeholder=\"Enter Answer\"\r\n              errorMessage=\"Answer should have atleast 2 characters\"\r\n              handleChange={setSecurityAnswer}\r\n              pattern=\"^[a-zA-Z\\s]{2,150}$\"\r\n            />\r\n            <Button type=\"submit\" label=\"Sign up\" className=\"button\" />\r\n\r\n            <p className=\"signup-small-text\">\r\n              Already signed up? Go to{\" \"}\r\n              <NavLink to=\"/\" className=\"flat-link\">\r\n                Login\r\n              </NavLink>\r\n            </p>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Upcoming.js",["107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125"],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\pages\\Profile.js",["126","127","128"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as md5 from \"md5\";\r\n\r\n// Components\r\nimport ConfirmationModal from \"../components/ConfirmationModal\";\r\nimport Input from \"../components/input\";\r\nimport Button from \"../components/button\";\r\nimport Menu from \"../components/Menu\";\r\nimport Navbar from \"../components/navbar\";\r\nimport { FiEdit3, FiCamera } from \"react-icons/fi\";\r\nimport CoverNone from \"../def/cover.svg\";\r\nimport UserNone from \"../def/User.svg\";\r\n\r\n// db\r\nimport db from \"../utils/db\";\r\n\r\n// Style\r\nimport \"../styles/Home.css\";\r\nimport \"../styles/profile.css\";\r\n\r\nconst Profile = (props) => {\r\n  const navigate = useNavigate();\r\n  const [name, setName] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [currentUser, setCurrentUser] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const [cover, setCover] = useState(\"\");\r\n\r\n  const user = useLiveQuery(() =>\r\n    db.users.where(\"userid\").equals(props.sessionId).toArray()\r\n  );\r\n  const usersList = useLiveQuery(() => db.users.toArray());\r\n\r\n  const getFile = (e, set) => {\r\n    let reader = new FileReader();\r\n    reader.readAsDataURL(e[0]);\r\n    reader.onload = (e) => {\r\n      set(reader.result);\r\n    };\r\n  };\r\n\r\n  const updateProfile = (e) => {\r\n    e.preventDefault();\r\n    const _val = [];\r\n    usersList.map((item) => {\r\n      _val.push(item.username.toLowerCase());\r\n    });\r\n\r\n    if (_val.includes(username.toLowerCase())) {\r\n      if (username === currentUser) {\r\n        db.users.update(user[0].userid, {\r\n          cover: cover,\r\n          img: image,\r\n          name: name,\r\n          username: username,\r\n        });\r\n        props.notify(\"Changes saved\", \"success\");\r\n      } else {\r\n        props.notify(\"Username already taken\", \"error\");\r\n      }\r\n    } else  {\r\n      db.users.update(user[0].userid, {\r\n        cover: cover,\r\n        img: image,\r\n        name: name,\r\n        username: username,\r\n      });\r\n      props.notify(\"Changes saved\", \"success\");\r\n    }\r\n  };\r\n\r\n  const [pModal, setpModal] = useState(false);\r\n  const PasswordModal = () => {\r\n    const [currentPassword, setCurrentPassword] = useState(\"\");\r\n    const [newPassword, setNewPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n    const signout = () => {\r\n      props.isLoggedInHandler();\r\n      props.setSessionId(\"\");\r\n      navigate(\"/\")\r\n    };\r\n\r\n    const updateNewPassword = (e) => {\r\n      e.preventDefault();\r\n      if (\r\n        currentPassword !== \"\" &&\r\n        newPassword !== \"\" &&\r\n        confirmPassword !== \"\"\r\n      ) {\r\n        console.log(\"hello\");\r\n        if (user[0].password === md5(currentPassword)) {\r\n          db.users.update(user[0].userid, { password: md5(newPassword) });\r\n          props.notify(\"Save new password\", \"success\");\r\n          signout()\r\n        } else {\r\n          props.notify(\"Incorrect current password\", \"error\");\r\n        }\r\n      } else {\r\n        props.notify(\"empty fields\", \"error\");\r\n      }\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <div className=\"overlay\">\r\n          <form className=\"password-container\" onSubmit={updateNewPassword}>\r\n            <h2> Change Password </h2>\r\n            <Input\r\n              type=\"password\"\r\n              label=\"Current Password\"\r\n              placeholder=\"enter current password\"\r\n              errorMessage=\"Password should be 12-20 characters and include at least 1 lowercase letter, 1 uppercase letter, 1 number and 1 special character\"\r\n              handleChange={setCurrentPassword}\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              label=\"New Password\"\r\n              placeholder=\"enter new password\"\r\n              errorMessage=\"Password should be 12-20 characters and include at least 1 lowercase letter, 1 uppercase letter, 1 number and 1 special character\"\r\n              handleChange={setNewPassword}\r\n              pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{12,20}$\"\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              label=\"Confirm New Password\"\r\n              placeholder=\"confirm password\"\r\n              errorMessage=\"Password doesnt match\"\r\n              handleChange={setConfirmPassword}\r\n              pattern={newPassword}\r\n            />\r\n            <div className=\"float-r\">\r\n              <Button\r\n                type=\"button\"\r\n                label=\"cancel\"\r\n                className=\"cancel-btn\"\r\n                handleClick={() => setpModal(!pModal)}\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                label=\"Save Password\"\r\n                className=\"confirm-btn\"\r\n              />\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const [modalState, setModalState] = useState(false);\r\n  const deleteAccount = (_id) => {\r\n    db.users.delete(_id);\r\n    props.isLoggedInHandler();\r\n    props.setSessionId(\"\");\r\n    props.notify(\"Account deleted\", \"success\");\r\n    navigate(\"/\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\r\n      navigate(\"/\");\r\n      props.setLoad(false)\r\n    } else {\r\n      props.setLoad(true)\r\n    }\r\n    \r\n    if (user) {\r\n      setCover(user[0].cover);\r\n      setImage(user[0].img);\r\n      setName(user[0].name);\r\n      setUsername(user[0].username);\r\n      setCurrentUser(user[0].username);\r\n      setPassword(md5(user[0].password));\r\n    }\r\n  }, [user, navigate, props.isLoggedIn, props.sessionId]);\r\n\r\n  return props.load ? (\r\n    <>\r\n      <Navbar sessionId={props.sessionId} />\r\n      <Menu\r\n        modalHandler = {() => navigate(`/${props.sessionId}`)}\r\n        isLoggedInHandler={props.isLoggedInHandler}\r\n        setSessionId={props.setSessionId}\r\n        sessionId={props.sessionId}\r\n      />\r\n      <div className=\"home-container\">\r\n        <div className=\"profile\">\r\n          <div\r\n            className=\"cover-photo\"\r\n            style={\r\n              cover === \"none\"\r\n                ? { backgroundImage: `url(${CoverNone})` }\r\n                : { backgroundImage: \"url(\" + cover + \")\" }\r\n            }\r\n          >\r\n            <div className=\"input-container\">\r\n              <div className=\"upload-icon\">\r\n                {\" \"}\r\n                <FiEdit3 className=\"icon\" />{\" \"}\r\n              </div>\r\n              <input\r\n                type=\"file\"\r\n                onChange={(e) => getFile(e.target.files, setCover)}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"user-details\">\r\n            <div className=\"image-name\">\r\n              <div className=\"img-container\">\r\n                <div\r\n                  className=\"user-img\"\r\n                  style={\r\n                    image === \"none\"\r\n                      ? { backgroundImage: `url(${UserNone})` }\r\n                      : { backgroundImage: \"url(\" + image + \")\" }\r\n                  }\r\n                >\r\n                  <div className=\"input-container\">\r\n                    <div className=\"upload-icon\">\r\n                      {\" \"}\r\n                      <FiCamera className=\"icon\" />{\" \"}\r\n                    </div>\r\n                    <input\r\n                      type=\"file\"\r\n                      onChange={(e) => getFile(e.target.files, setImage)}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <h1> {name} </h1>\r\n            </div>\r\n            <form onSubmit={updateProfile}>\r\n              <Input\r\n                type=\"text\"\r\n                label=\"Name\"\r\n                placeholder=\"Enter Name\"\r\n                errorMessage=\"Name should have a minimum of 5 characters\"\r\n                handleChange={setName}\r\n                value={name}\r\n                pattern=\"^[a-zA-Z\\s]{5,150}$\"\r\n              />\r\n              <Input\r\n                type=\"text\"\r\n                label=\"Username\"\r\n                placeholder=\"Enter username\"\r\n                errorMessage=\"Username should be 6-32 characters and shouldn't include any special character!\"\r\n                handleChange={setUsername}\r\n                value={username}\r\n                pattern=\"^[A-Za-z0-9]{6,32}$\"\r\n              />\r\n              <div className=\"password\">\r\n                <p> Password </p>\r\n                <Button\r\n                  type=\"button\"\r\n                  label=\"Change password\"\r\n                  className=\"button\"\r\n                  handleClick={() => setpModal(!pModal)}\r\n                />\r\n              </div>\r\n              <Button type=\"submit\" label=\"Save Changes\" className=\"button\" />\r\n              <Button\r\n                type=\"button\"\r\n                label=\"Delete Account\"\r\n                className=\"delete-btn button\"\r\n                handleClick={() => setModalState(!modalState)}\r\n              />\r\n            </form>\r\n            {pModal ? <PasswordModal /> : null}\r\n            <ConfirmationModal\r\n              header=\"Delete Account\"\r\n              body=\"Are you sure you want to delete this account?\"\r\n              onConfirm={() => deleteAccount(user[0].userid)}\r\n              onHide={() => setModalState(!modalState)}\r\n              isVisible={modalState}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  ) : null\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\utils\\db.js",[],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\navbar.js",[],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\TaskModal.js",["129"],[],"import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport \"../styles/components.css\";\r\nimport Input from \"./input\";\r\nimport Button from \"./button\";\r\nimport db from \"../utils/db\";\r\n\r\nconst TaskModal = (props) => {\r\n  const { modalHandler } = props;\r\n  const [taskName, setTaskName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const task = useLiveQuery(() =>\r\n    db.tasks.where(\"taskid\").equals(props.editId).toArray()\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (props.edit === true) {\r\n      if (task) {\r\n        setTaskName(task[0].taskname);\r\n        setDescription(task[0].description);\r\n        setStartDate(task[0].startDate);\r\n        setEndDate(task[0].endDate);\r\n      }\r\n    }\r\n  }, [task]);\r\n\r\n  const success = () => {\r\n    setTaskName(\"\");\r\n    setDescription(\"\");\r\n    setStartDate(\"\");\r\n    setEndDate(\"\");\r\n    modalHandler();\r\n  };\r\n\r\n  const cancel = () => {\r\n    modalHandler();\r\n    props.setEdit(false);\r\n  };\r\n\r\n  let current = new Date();\r\n  let yearNow = `${current.getFullYear()}`;\r\n  let monthNow = `0${current.getMonth() + 1}`;\r\n  let dayNow = `${current.getDate()}`;\r\n  if (monthNow === \"10\" || monthNow === \"11\" || monthNow === \"10\")\r\n    monthNow = `${current.getMonth() + 1}`;\r\n  const dateNow = yearNow + \"-\" + monthNow + \"-\" + dayNow;\r\n\r\n  const addTask = (e) => {\r\n    e.preventDefault();\r\n    let newTask = {\r\n      taskname: taskName,\r\n      description: description,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n      completed: false,\r\n      userid: props.userid,\r\n    };\r\n\r\n    if (taskName !== \"\" && startDate !== \"\" && endDate !== \"\") {\r\n      if (startDate < dateNow) {\r\n        props.notify(\r\n          \"Start date must not be earlier than todays date\",\r\n          \"error\"\r\n        );\r\n      } else {\r\n        if (endDate < startDate) {\r\n          props.notify(\r\n            \"End date must be greater than or equal to start date\",\r\n            \"error\"\r\n          );\r\n        } else {\r\n          props.notify(\"Task Saved\", \"success\");\r\n          db.tasks.add(newTask);\r\n          success();\r\n        }\r\n      }\r\n    } else {\r\n      props.notify(\"Please enter all fields, description (optional)\", \"error\");\r\n    }\r\n  };\r\n\r\n  const editTask = (e) => {\r\n    e.preventDefault();\r\n    if (taskName !== \"\" && startDate !== \"\" && endDate !== \"\") {\r\n      if (startDate < dateNow) {\r\n        props.notify(\r\n          \"Start date must not be earlier than todays date\",\r\n          \"error\"\r\n        );\r\n      } else {\r\n        if (endDate < startDate) {\r\n          props.notify(\r\n            \"End date must be greater than or equal to start date\",\r\n            \"error\"\r\n          );\r\n        } else {\r\n          props.notify(\"Task Saved\", \"success\");\r\n          db.tasks.update(task[0].taskid, {\r\n            taskname: taskName,\r\n            description: description,\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n          });\r\n          success();\r\n          props.setEdit(false);\r\n        }\r\n      }\r\n    } else {\r\n      props.notify(\"Please enter all fields, description (optional)\", \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"add-task-form\">\r\n        <div className=\"input-container\">\r\n          <div className=\"input-task-title\">\r\n            <Input\r\n              type=\"text\"\r\n              value={taskName}\r\n              placeholder=\"Enter task title\"\r\n              handleChange={setTaskName}\r\n            />\r\n          </div>\r\n          <textarea\r\n            rows=\"5\"\r\n            value={description}\r\n            placeholder=\"Enter task description (optional)\"\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"date-container\">\r\n          <div className=\"input-date\">\r\n            <div className=\"text-date\">\r\n              <h1>Start Date</h1>\r\n              <Input\r\n                type=\"date\"\r\n                value={startDate}\r\n                handleChange={setStartDate}\r\n              />\r\n            </div>\r\n            <div className=\"text-date\">\r\n              <h1>End Date</h1>\r\n              <Input type=\"date\" value={endDate} handleChange={setEndDate} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"btn-col-2\">\r\n          {props.edit ? (\r\n            <Button\r\n              label=\"Update Task\"\r\n              type=\"submit\"\r\n              className=\"button\"\r\n              handleClick={editTask}\r\n            />\r\n          ) : (\r\n            <Button\r\n              label=\"Add Task\"\r\n              type=\"submit\"\r\n              className=\"button\"\r\n              handleClick={addTask}\r\n            />\r\n          )}\r\n          <Button\r\n            label=\"cancel\"\r\n            type=\"button\"\r\n            className=\"button cancel\"\r\n            handleClick={cancel}\r\n          />\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\button.js",[],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\Menu.js",["130"],[],"import { NavLink } from \"react-router-dom\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport \"../styles/Menu.css\";\r\nimport UserNone from \"../def/User.svg\";\r\n\r\n// db\r\nimport db from \"../utils/db\";\r\nimport Upcoming from \"../pages/Upcoming\";\r\n\r\nconst Menu = (props) => {\r\n  const { modalHandler } = props;\r\n\r\n  const SignOutHandler = () => {\r\n    props.isLoggedInHandler();\r\n    props.setSessionId(\"\");\r\n  };\r\n\r\n  const user = useLiveQuery(() =>\r\n    db.users.where(\"userid\").equals(props.sessionId).toArray()\r\n  );\r\n\r\n  const [image, setImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (user) setImage(user[0].img);\r\n  }, [user]);\r\n\r\n  return (\r\n    <div className=\"menu-container\">\r\n      <div className=\"menu-bar\">\r\n        <div className=\"menu-items\">\r\n          <div className=\"col-2\">\r\n            <div\r\n              className=\"user-img-small\"\r\n              style={\r\n                image === \"none\"\r\n                  ? { backgroundImage: `url(${UserNone})` }\r\n                  : { backgroundImage: \"url(\" + image + \")\" }\r\n              }\r\n            ></div>\r\n            <h1> {user ? user[0].username : \"username\"} </h1>\r\n          </div>\r\n          <div className=\"add-task-button\" onClick={modalHandler}>\r\n            <h1>+ Add a task</h1>\r\n          </div>\r\n\r\n          <div className=\"list\">\r\n            <h1>Lists</h1>\r\n            <div className=\"list-items\">\r\n              <NavLink\r\n                to={`/${props.sessionId}`}\r\n                className={props.filter === \"all\" ? \"active-link\" : \"app-link\"}\r\n                onClick={() => props.filterChangeHandler(\"all\")}\r\n              >\r\n                <h2>All Tasks</h2>\r\n              </NavLink>\r\n              <div className=\"list-items\">\r\n                <NavLink\r\n                  to={`/${props.sessionId}`}\r\n                  className={props.filter === \"today\" ? \"active-link\" : \"app-link\"}\r\n                  onClick={() => props.filterChangeHandler(\"today\")}\r\n                >\r\n                  <h2>Today</h2>\r\n                </NavLink>\r\n              </div>\r\n              <div className=\"list-items\">\r\n              <NavLink\r\n                to={`/${props.sessionId}`}\r\n                className={props.filter === \"filter\" ? \"active-link\" : \"app-link\"}\r\n                onClick={() => props.filterChangeHandler(\"filter\")}\r\n              >\r\n                <h2>Filters</h2>\r\n              </NavLink>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"calendar\">\r\n            <h1>Calendar</h1>\r\n            <div className=\"calendar-items\">\r\n            <NavLink\r\n              to={`/upcoming/${props.sessionId}`}\r\n              className={({ isActive }) =>\r\n                isActive ? \"active-link\" : \"app-link\"\r\n              }\r\n              >\r\n                <h1>Upcomings</h1>\r\n              </NavLink>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"signout-button\" onClick={SignOutHandler}>\r\n            <h1>Sign Out</h1>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\TaskList.js",[],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\Dropdown.js",[],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\input.js",[],[],"C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\ConfirmationModal.js",["131"],[],"import React from \"react\";\r\nimport Button from \"./button\";\r\nimport \"../styles/popup.css\"\r\n\r\nconst ConfirmationModal = (props) => {\r\n  return props.isVisible ? (\r\n    <div className=\"overlay\">\r\n      <div className=\"add-dialog\">\r\n        <h3>{props.header}</h3>\r\n        <p>{props.body}</p>\r\n        <div className=\"add-dialog-buttons\">\r\n          <button className=\"cancel-btn\" onClick={props.onHide}>Cancel</button>\r\n          <button className=\"confirm-btn\" onClick={props.onConfirm}>Confirm</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default ConfirmationModal;\r\n","C:\\Users\\User\\OneDrive\\Desktop\\Insight-todo-app2\\insight-todo-app2\\insight-todo-app-INS-016\\src\\components\\ForgotPassword.js",["132"],[],"import React, { useState } from \"react\";\r\nimport Input from \"./input\";\r\nimport Button from \"./button\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport * as md5 from \"md5\";\r\nimport db from \"../utils/db\";\r\nimport \"../styles/popup.css\";\r\n\r\nconst ForgotPassword = (props) => {\r\n  const [username, setUsername] = useState(\"\");\r\n  const [securityQuestion, setSecurityQuestion] = useState(\r\n    \"In what city were you born?\"\r\n  );\r\n  const [securityAnswer, setSecurityAnswer] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n  const usersList = useLiveQuery(() => db.users.toArray());\r\n  const user = db.users.where(\"username\").equalsIgnoreCase(username).toArray();\r\n\r\n  const submitForgotPassword = (e) => {\r\n    e.preventDefault();\r\n    // list of usernames\r\n    const _val = [];\r\n    usersList.map((item) => {\r\n      _val.push(item.username.toLowerCase());\r\n    });\r\n    console.log(user);\r\n\r\n    // validate if all fields are empty\r\n    if (\r\n      username !== \"\" &&\r\n      securityAnswer !== \"\" &&\r\n      password !== \"\" &&\r\n      confirmPassword !== \"\"\r\n    ) {\r\n      // verify if username exists\r\n      if (_val.includes(username.toLowerCase())) {\r\n        // validate if security question and answer is correct\r\n        if (\r\n          securityQuestion === user._value[0].securityQuestion &&\r\n          securityAnswer === user._value[0].securityAnswer\r\n        ) {\r\n          db.users.update(parseInt(user._value[0].userid), {\r\n            password: md5(password),\r\n          });\r\n          props.notify(\"New password saved\", \"success\");\r\n          props.popupHandler();\r\n        } else {\r\n          props.notify(\r\n            \"Incorrect Security question and answer. who r u?!\",\r\n            \"error\"\r\n          );\r\n        }\r\n      } else {\r\n        props.notify(\"Username doesn't exists\", \"error\");\r\n      }\r\n    } else {\r\n      props.notify(\"Fields are empty\", \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className={props.forgotPopup ? \"overlay\" : \"overlay d-none\"}>\r\n        <div className=\"forgot-container\">\r\n          <h2> Forgot Password </h2>\r\n          <form onSubmit={submitForgotPassword}>\r\n            <Input\r\n              type=\"text\"\r\n              label=\"Username\"\r\n              placeholder=\"Enter username\"\r\n              handleChange={setUsername}\r\n            />\r\n            <div className=\"input-container\">\r\n              <label> Security Question </label>\r\n              <div className=\"arrow-drop\"> </div>\r\n              <select\r\n                className=\"select\"\r\n                onChange={(e) => {\r\n                  const selectedQuestion = e.target.value;\r\n                  setSecurityQuestion(selectedQuestion);\r\n                }}\r\n              >\r\n                <option value=\"In what city were you born?\">\r\n                  In what city were you born?\r\n                </option>\r\n                <option value=\"What is the name of your favorite pet?\">\r\n                  What is the name of your favorite pet?\r\n                </option>\r\n                <option value=\"What is your mother's maiden name?\">\r\n                  What is your mother's maiden name?\r\n                </option>\r\n                <option value=\"What was your favorite food as a child?\">\r\n                  What was your favorite food as a child?\r\n                </option>\r\n                <option value=\"IWhat is the name of your first school?\">\r\n                  What is the name of your first school?\r\n                </option>\r\n              </select>\r\n            </div>\r\n            <Input\r\n              type=\"text\"\r\n              label=\"Answer\"\r\n              placeholder=\"Enter answer\"\r\n              handleChange={setSecurityAnswer}\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              label=\"New Password\"\r\n              placeholder=\"Enter password\"\r\n              errorMessage=\"Password should be 12-20 characters and include at least 1 lowercase letter, 1 uppercase letter, 1 number and 1 special character\"\r\n              handleChange={setPassword}\r\n              pattern=\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{12,20}$\"\r\n            />\r\n            <Input\r\n              type=\"password\"\r\n              label=\"Confirm New Password\"\r\n              placeholder=\"Enter password\"\r\n              errorMessage=\"Password doesnt match\"\r\n              handleChange={setConfirmPassword}\r\n              pattern={password}\r\n            />\r\n            <Button type=\"submit\" label=\"Reset password\" className=\"button\" />\r\n            <Button\r\n              type=\"button\"\r\n              label=\"cancel\"\r\n              className=\"cancel-btn\"\r\n              handleClick={props.popupHandler}\r\n            />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n",{"ruleId":"133","severity":1,"message":"134","line":5,"column":3,"nodeType":"135","messageId":"136","endLine":5,"endColumn":14},{"ruleId":"133","severity":1,"message":"137","line":7,"column":31,"nodeType":"135","messageId":"136","endLine":7,"endColumn":46},{"ruleId":"133","severity":1,"message":"138","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":22},{"ruleId":"139","severity":1,"message":"140","line":30,"column":6,"nodeType":"141","endLine":30,"endColumn":41,"suggestions":"142"},{"ruleId":"133","severity":1,"message":"143","line":82,"column":10,"nodeType":"135","messageId":"136","endLine":82,"endColumn":20},{"ruleId":"133","severity":1,"message":"144","line":82,"column":22,"nodeType":"135","messageId":"136","endLine":82,"endColumn":35},{"ruleId":"145","severity":1,"message":"146","line":128,"column":5,"nodeType":"147","messageId":"148","endLine":141,"endColumn":6},{"ruleId":"133","severity":1,"message":"149","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":14},{"ruleId":"150","severity":1,"message":"151","line":41,"column":26,"nodeType":"152","messageId":"153","endLine":41,"endColumn":28},{"ruleId":"154","severity":1,"message":"155","line":12,"column":17,"nodeType":"156","messageId":"157","endLine":12,"endColumn":19},{"ruleId":"150","severity":1,"message":"151","line":29,"column":26,"nodeType":"152","messageId":"153","endLine":29,"endColumn":28},{"ruleId":"133","severity":1,"message":"138","line":2,"column":10,"nodeType":"135","messageId":"136","endLine":2,"endColumn":22},{"ruleId":"133","severity":1,"message":"158","line":3,"column":34,"nodeType":"135","messageId":"136","endLine":3,"endColumn":40},{"ruleId":"133","severity":1,"message":"159","line":16,"column":8,"nodeType":"135","messageId":"136","endLine":16,"endColumn":10},{"ruleId":"139","severity":1,"message":"140","line":32,"column":6,"nodeType":"141","endLine":32,"endColumn":41,"suggestions":"160"},{"ruleId":"133","severity":1,"message":"161","line":35,"column":9,"nodeType":"135","messageId":"136","endLine":35,"endColumn":16},{"ruleId":"133","severity":1,"message":"162","line":36,"column":10,"nodeType":"135","messageId":"136","endLine":36,"endColumn":15},{"ruleId":"133","severity":1,"message":"163","line":37,"column":10,"nodeType":"135","messageId":"136","endLine":37,"endColumn":14},{"ruleId":"133","severity":1,"message":"164","line":37,"column":16,"nodeType":"135","messageId":"136","endLine":37,"endColumn":23},{"ruleId":"133","severity":1,"message":"165","line":38,"column":9,"nodeType":"135","messageId":"136","endLine":38,"endColumn":21},{"ruleId":"133","severity":1,"message":"166","line":74,"column":11,"nodeType":"135","messageId":"136","endLine":74,"endColumn":15},{"ruleId":"133","severity":1,"message":"167","line":75,"column":11,"nodeType":"135","messageId":"136","endLine":75,"endColumn":17},{"ruleId":"133","severity":1,"message":"168","line":75,"column":19,"nodeType":"135","messageId":"136","endLine":75,"endColumn":28},{"ruleId":"133","severity":1,"message":"169","line":76,"column":10,"nodeType":"135","messageId":"136","endLine":76,"endColumn":16},{"ruleId":"133","severity":1,"message":"170","line":80,"column":11,"nodeType":"135","messageId":"136","endLine":80,"endColumn":21},{"ruleId":"133","severity":1,"message":"171","line":80,"column":23,"nodeType":"135","messageId":"136","endLine":80,"endColumn":36},{"ruleId":"133","severity":1,"message":"172","line":83,"column":11,"nodeType":"135","messageId":"136","endLine":83,"endColumn":17},{"ruleId":"133","severity":1,"message":"173","line":83,"column":19,"nodeType":"135","messageId":"136","endLine":83,"endColumn":28},{"ruleId":"133","severity":1,"message":"174","line":89,"column":10,"nodeType":"135","messageId":"136","endLine":89,"endColumn":14},{"ruleId":"133","severity":1,"message":"175","line":91,"column":9,"nodeType":"135","messageId":"136","endLine":91,"endColumn":11},{"ruleId":"133","severity":1,"message":"176","line":28,"column":10,"nodeType":"135","messageId":"136","endLine":28,"endColumn":18},{"ruleId":"150","severity":1,"message":"151","line":48,"column":26,"nodeType":"152","messageId":"153","endLine":48,"endColumn":28},{"ruleId":"139","severity":1,"message":"177","line":179,"column":6,"nodeType":"141","endLine":179,"endColumn":57,"suggestions":"178"},{"ruleId":"139","severity":1,"message":"179","line":27,"column":6,"nodeType":"141","endLine":27,"endColumn":12,"suggestions":"180"},{"ruleId":"133","severity":1,"message":"181","line":9,"column":8,"nodeType":"135","messageId":"136","endLine":9,"endColumn":16},{"ruleId":"133","severity":1,"message":"182","line":2,"column":8,"nodeType":"135","messageId":"136","endLine":2,"endColumn":14},{"ruleId":"150","severity":1,"message":"151","line":25,"column":26,"nodeType":"152","messageId":"153","endLine":25,"endColumn":28},"no-unused-vars","'useNavigate' is defined but never used.","Identifier","unusedVar","'useLayoutEffect' is defined but never used.","'useLiveQuery' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["183"],"'sortTaskBy' is assigned a value but never used.","'setSortTaskBy' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Link' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'render' is defined but never used.","'db' is defined but never used.",["184"],"'dateNow' is assigned a value but never used.","'month' is assigned a value but never used.","'date' is assigned a value but never used.","'setDate' is assigned a value but never used.","'convertMonth' is assigned a value but never used.","'edit' is assigned a value but never used.","'editId' is assigned a value but never used.","'setEditId' is assigned a value but never used.","'userid' is assigned a value but never used.","'modalState' is assigned a value but never used.","'setModalState' is assigned a value but never used.","'taskId' is assigned a value but never used.","'setTaskId' is assigned a value but never used.","'year' is assigned a value but never used.","'id' is assigned a value but never used.","'password' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["185"],"React Hook useEffect has a missing dependency: 'props.edit'. Either include it or remove the dependency array.",["186"],"'Upcoming' is defined but never used.","'Button' is defined but never used.",{"desc":"187","fix":"188"},{"desc":"187","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},"Update the dependencies array to be: [navigate, props, props.isLoggedIn, props.sessionId]",{"range":"194","text":"195"},{"range":"196","text":"195"},"Update the dependencies array to be: [user, navigate, props.isLoggedIn, props.sessionId, props]",{"range":"197","text":"198"},"Update the dependencies array to be: [props.edit, task]",{"range":"199","text":"200"},[860,895],"[navigate, props, props.isLoggedIn, props.sessionId]",[944,979],[5613,5664],"[user, navigate, props.isLoggedIn, props.sessionId, props]",[867,873],"[props.edit, task]"]