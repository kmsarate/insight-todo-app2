{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\Insight-todo-app2\\\\insight-todo-app2\\\\insight-todo-app-ins-016\\\\src\\\\components\\\\TaskModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport \"../styles/components.css\";\nimport Input from \"./input\";\nimport Button from \"./button\";\nimport db from \"../utils/db\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TaskModal = props => {\n  _s();\n\n  const {\n    modalHandler\n  } = props;\n  const [taskName, setTaskName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const task = useLiveQuery(() => db.tasks.where(\"taskid\").equals(props.editId).toArray());\n  useEffect(() => {\n    if (props.edit === true) {\n      if (task) {\n        setTaskName(task[0].taskname);\n        setDescription(task[0].description);\n        setStartDate(task[0].startDate);\n        setEndDate(task[0].endDate);\n      }\n    }\n  }, [task]);\n\n  const success = () => {\n    setTaskName(\"\");\n    setDescription(\"\");\n    setStartDate(\"\");\n    setEndDate(\"\");\n    modalHandler();\n  };\n\n  const cancel = () => {\n    modalHandler();\n    props.setEdit(false);\n  };\n\n  let current = new Date();\n  let yearNow = `${current.getFullYear()}`;\n  let monthNow = `0${current.getMonth() + 1}`;\n  let dayNow = `${current.getDate()}`;\n  if (monthNow === \"10\" || monthNow === \"11\" || monthNow === \"10\") monthNow = `${current.getMonth() + 1}`;\n  const dateNow = yearNow + \"-\" + monthNow + \"-\" + dayNow;\n\n  const addTask = e => {\n    e.preventDefault();\n    let newTask = {\n      taskname: taskName,\n      description: description,\n      startDate: startDate,\n      endDate: endDate,\n      completed: false,\n      userid: props.userid\n    };\n\n    if (taskName !== \"\" && startDate !== \"\" && endDate !== \"\") {\n      if (startDate < dateNow) {\n        props.notify(\"Start date must not be earlier than todays date\", \"error\");\n      } else {\n        if (endDate < startDate) {\n          props.notify(\"End date must be greater than or equal to start date\", \"error\");\n        } else {\n          props.notify(\"Task Saved\", \"success\");\n          db.tasks.add(newTask);\n          success();\n        }\n      }\n    } else {\n      props.notify(\"Please enter all fields, description (optional)\", \"error\");\n    }\n  };\n\n  const editTask = e => {\n    e.preventDefault();\n\n    if (taskName !== \"\" && startDate !== \"\" && endDate !== \"\") {\n      if (startDate < dateNow) {\n        props.notify(\"Start date must not be earlier than todays date\", \"error\");\n      } else {\n        if (endDate < startDate) {\n          props.notify(\"End date must be greater than or equal to start date\", \"error\");\n        } else {\n          props.notify(\"Task Saved\", \"success\");\n          db.tasks.update(task[0].taskid, {\n            taskname: taskName,\n            description: description,\n            startDate: startDate,\n            endDate: endDate\n          });\n          success();\n          props.setEdit(false);\n        }\n      }\n    } else {\n      props.notify(\"Please enter all fields, description (optional)\", \"error\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"add-task-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-task-title\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            type: \"text\",\n            value: taskName,\n            placeholder: \"Enter task title\",\n            handleChange: setTaskName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"5\",\n          value: description,\n          placeholder: \"Enter task description (optional)\",\n          onChange: e => setDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"date-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-date\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-date\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Start Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"date\",\n              value: startDate,\n              handleChange: setStartDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-date\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"End Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"date\",\n              value: endDate,\n              handleChange: setEndDate\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-col-2\",\n        children: [props.edit ? /*#__PURE__*/_jsxDEV(Button, {\n          label: \"Update Task\",\n          type: \"submit\",\n          className: \"button\",\n          handleClick: editTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          label: \"Add Task\",\n          type: \"submit\",\n          className: \"button\",\n          handleClick: addTask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          label: \"cancel\",\n          type: \"button\",\n          className: \"button cancel\",\n          handleClick: cancel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(TaskModal, \"cPT2ZIPU5vV94YDc+DdGAnb7Vkk=\", false, function () {\n  return [useLiveQuery];\n});\n\n_c = TaskModal;\nexport default TaskModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskModal\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/Insight-todo-app2/insight-todo-app2/insight-todo-app-ins-016/src/components/TaskModal.js"],"names":["React","useState","useEffect","useLiveQuery","Input","Button","db","TaskModal","props","modalHandler","taskName","setTaskName","description","setDescription","startDate","setStartDate","endDate","setEndDate","task","tasks","where","equals","editId","toArray","edit","taskname","success","cancel","setEdit","current","Date","yearNow","getFullYear","monthNow","getMonth","dayNow","getDate","dateNow","addTask","e","preventDefault","newTask","completed","userid","notify","add","editTask","update","taskid","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,OAAO,0BAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,EAAP,MAAe,aAAf;;;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM;AAAEC,IAAAA;AAAF,MAAmBD,KAAzB;AACA,QAAM,CAACE,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMiB,IAAI,GAAGf,YAAY,CAAC,MACxBG,EAAE,CAACa,KAAH,CAASC,KAAT,CAAe,QAAf,EAAyBC,MAAzB,CAAgCb,KAAK,CAACc,MAAtC,EAA8CC,OAA9C,EADuB,CAAzB;AAIArB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,KAAK,CAACgB,IAAN,KAAe,IAAnB,EAAyB;AACvB,UAAIN,IAAJ,EAAU;AACRP,QAAAA,WAAW,CAACO,IAAI,CAAC,CAAD,CAAJ,CAAQO,QAAT,CAAX;AACAZ,QAAAA,cAAc,CAACK,IAAI,CAAC,CAAD,CAAJ,CAAQN,WAAT,CAAd;AACAG,QAAAA,YAAY,CAACG,IAAI,CAAC,CAAD,CAAJ,CAAQJ,SAAT,CAAZ;AACAG,QAAAA,UAAU,CAACC,IAAI,CAAC,CAAD,CAAJ,CAAQF,OAAT,CAAV;AACD;AACF;AACF,GATQ,EASN,CAACE,IAAD,CATM,CAAT;;AAWA,QAAMQ,OAAO,GAAG,MAAM;AACpBf,IAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAE,IAAAA,UAAU,CAAC,EAAD,CAAV;AACAR,IAAAA,YAAY;AACb,GAND;;AAQA,QAAMkB,MAAM,GAAG,MAAM;AACnBlB,IAAAA,YAAY;AACZD,IAAAA,KAAK,CAACoB,OAAN,CAAc,KAAd;AACD,GAHD;;AAKA,MAAIC,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACA,MAAIC,OAAO,GAAI,GAAEF,OAAO,CAACG,WAAR,EAAsB,EAAvC;AACA,MAAIC,QAAQ,GAAI,IAAGJ,OAAO,CAACK,QAAR,KAAqB,CAAE,EAA1C;AACA,MAAIC,MAAM,GAAI,GAAEN,OAAO,CAACO,OAAR,EAAkB,EAAlC;AACA,MAAIH,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,IAAlC,IAA0CA,QAAQ,KAAK,IAA3D,EACEA,QAAQ,GAAI,GAAEJ,OAAO,CAACK,QAAR,KAAqB,CAAE,EAArC;AACF,QAAMG,OAAO,GAAGN,OAAO,GAAG,GAAV,GAAgBE,QAAhB,GAA2B,GAA3B,GAAiCE,MAAjD;;AAEA,QAAMG,OAAO,GAAIC,CAAD,IAAO;AACrBA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIC,OAAO,GAAG;AACZhB,MAAAA,QAAQ,EAAEf,QADE;AAEZE,MAAAA,WAAW,EAAEA,WAFD;AAGZE,MAAAA,SAAS,EAAEA,SAHC;AAIZE,MAAAA,OAAO,EAAEA,OAJG;AAKZ0B,MAAAA,SAAS,EAAE,KALC;AAMZC,MAAAA,MAAM,EAAEnC,KAAK,CAACmC;AANF,KAAd;;AASA,QAAIjC,QAAQ,KAAK,EAAb,IAAmBI,SAAS,KAAK,EAAjC,IAAuCE,OAAO,KAAK,EAAvD,EAA2D;AACzD,UAAIF,SAAS,GAAGuB,OAAhB,EAAyB;AACvB7B,QAAAA,KAAK,CAACoC,MAAN,CACE,iDADF,EAEE,OAFF;AAID,OALD,MAKO;AACL,YAAI5B,OAAO,GAAGF,SAAd,EAAyB;AACvBN,UAAAA,KAAK,CAACoC,MAAN,CACE,sDADF,EAEE,OAFF;AAID,SALD,MAKO;AACLpC,UAAAA,KAAK,CAACoC,MAAN,CAAa,YAAb,EAA2B,SAA3B;AACAtC,UAAAA,EAAE,CAACa,KAAH,CAAS0B,GAAT,CAAaJ,OAAb;AACAf,UAAAA,OAAO;AACR;AACF;AACF,KAlBD,MAkBO;AACLlB,MAAAA,KAAK,CAACoC,MAAN,CAAa,iDAAb,EAAgE,OAAhE;AACD;AACF,GAhCD;;AAkCA,QAAME,QAAQ,GAAIP,CAAD,IAAO;AACtBA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI9B,QAAQ,KAAK,EAAb,IAAmBI,SAAS,KAAK,EAAjC,IAAuCE,OAAO,KAAK,EAAvD,EAA2D;AACzD,UAAIF,SAAS,GAAGuB,OAAhB,EAAyB;AACvB7B,QAAAA,KAAK,CAACoC,MAAN,CACE,iDADF,EAEE,OAFF;AAID,OALD,MAKO;AACL,YAAI5B,OAAO,GAAGF,SAAd,EAAyB;AACvBN,UAAAA,KAAK,CAACoC,MAAN,CACE,sDADF,EAEE,OAFF;AAID,SALD,MAKO;AACLpC,UAAAA,KAAK,CAACoC,MAAN,CAAa,YAAb,EAA2B,SAA3B;AACAtC,UAAAA,EAAE,CAACa,KAAH,CAAS4B,MAAT,CAAgB7B,IAAI,CAAC,CAAD,CAAJ,CAAQ8B,MAAxB,EAAgC;AAC9BvB,YAAAA,QAAQ,EAAEf,QADoB;AAE9BE,YAAAA,WAAW,EAAEA,WAFiB;AAG9BE,YAAAA,SAAS,EAAEA,SAHmB;AAI9BE,YAAAA,OAAO,EAAEA;AAJqB,WAAhC;AAMAU,UAAAA,OAAO;AACPlB,UAAAA,KAAK,CAACoB,OAAN,CAAc,KAAd;AACD;AACF;AACF,KAxBD,MAwBO;AACLpB,MAAAA,KAAK,CAACoC,MAAN,CAAa,iDAAb,EAAgE,OAAhE;AACD;AACF,GA7BD;;AA+BA,sBACE;AAAA,2BACE;AAAM,MAAA,SAAS,EAAC,eAAhB;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA,iCACE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,KAAK,EAAElC,QAFT;AAGE,YAAA,WAAW,EAAC,kBAHd;AAIE,YAAA,YAAY,EAAEC;AAJhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AACE,UAAA,IAAI,EAAC,GADP;AAEE,UAAA,KAAK,EAAEC,WAFT;AAGE,UAAA,WAAW,EAAC,mCAHd;AAIE,UAAA,QAAQ,EAAG2B,CAAD,IAAO1B,cAAc,CAAC0B,CAAC,CAACU,MAAF,CAASC,KAAV;AAJjC;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAiBE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,YAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,KAAD;AACE,cAAA,IAAI,EAAC,MADP;AAEE,cAAA,KAAK,EAAEpC,SAFT;AAGE,cAAA,YAAY,EAAEC;AAHhB;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eASE;AAAK,YAAA,SAAS,EAAC,WAAf;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,QAAC,KAAD;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,KAAK,EAAEC,OAA1B;AAAmC,cAAA,YAAY,EAAEC;AAAjD;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAjBF,eAiCE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,mBACGT,KAAK,CAACgB,IAAN,gBACC,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,aADR;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,SAAS,EAAC,QAHZ;AAIE,UAAA,WAAW,EAAEsB;AAJf;AAAA;AAAA;AAAA;AAAA,gBADD,gBAQC,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,UADR;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,SAAS,EAAC,QAHZ;AAIE,UAAA,WAAW,EAAER;AAJf;AAAA;AAAA;AAAA;AAAA,gBATJ,eAgBE,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,QADR;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,SAAS,EAAC,eAHZ;AAIE,UAAA,WAAW,EAAEX;AAJf;AAAA;AAAA;AAAA;AAAA,gBAhBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA6DD,CAxKD;;GAAMpB,S;UAMSJ,Y;;;KANTI,S;AA0KN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport \"../styles/components.css\";\r\nimport Input from \"./input\";\r\nimport Button from \"./button\";\r\nimport db from \"../utils/db\";\r\n\r\nconst TaskModal = (props) => {\r\n  const { modalHandler } = props;\r\n  const [taskName, setTaskName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const task = useLiveQuery(() =>\r\n    db.tasks.where(\"taskid\").equals(props.editId).toArray()\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (props.edit === true) {\r\n      if (task) {\r\n        setTaskName(task[0].taskname);\r\n        setDescription(task[0].description);\r\n        setStartDate(task[0].startDate);\r\n        setEndDate(task[0].endDate);\r\n      }\r\n    }\r\n  }, [task]);\r\n\r\n  const success = () => {\r\n    setTaskName(\"\");\r\n    setDescription(\"\");\r\n    setStartDate(\"\");\r\n    setEndDate(\"\");\r\n    modalHandler();\r\n  };\r\n\r\n  const cancel = () => {\r\n    modalHandler();\r\n    props.setEdit(false);\r\n  };\r\n\r\n  let current = new Date();\r\n  let yearNow = `${current.getFullYear()}`;\r\n  let monthNow = `0${current.getMonth() + 1}`;\r\n  let dayNow = `${current.getDate()}`;\r\n  if (monthNow === \"10\" || monthNow === \"11\" || monthNow === \"10\")\r\n    monthNow = `${current.getMonth() + 1}`;\r\n  const dateNow = yearNow + \"-\" + monthNow + \"-\" + dayNow;\r\n\r\n  const addTask = (e) => {\r\n    e.preventDefault();\r\n    let newTask = {\r\n      taskname: taskName,\r\n      description: description,\r\n      startDate: startDate,\r\n      endDate: endDate,\r\n      completed: false,\r\n      userid: props.userid,\r\n    };\r\n\r\n    if (taskName !== \"\" && startDate !== \"\" && endDate !== \"\") {\r\n      if (startDate < dateNow) {\r\n        props.notify(\r\n          \"Start date must not be earlier than todays date\",\r\n          \"error\"\r\n        );\r\n      } else {\r\n        if (endDate < startDate) {\r\n          props.notify(\r\n            \"End date must be greater than or equal to start date\",\r\n            \"error\"\r\n          );\r\n        } else {\r\n          props.notify(\"Task Saved\", \"success\");\r\n          db.tasks.add(newTask);\r\n          success();\r\n        }\r\n      }\r\n    } else {\r\n      props.notify(\"Please enter all fields, description (optional)\", \"error\");\r\n    }\r\n  };\r\n\r\n  const editTask = (e) => {\r\n    e.preventDefault();\r\n    if (taskName !== \"\" && startDate !== \"\" && endDate !== \"\") {\r\n      if (startDate < dateNow) {\r\n        props.notify(\r\n          \"Start date must not be earlier than todays date\",\r\n          \"error\"\r\n        );\r\n      } else {\r\n        if (endDate < startDate) {\r\n          props.notify(\r\n            \"End date must be greater than or equal to start date\",\r\n            \"error\"\r\n          );\r\n        } else {\r\n          props.notify(\"Task Saved\", \"success\");\r\n          db.tasks.update(task[0].taskid, {\r\n            taskname: taskName,\r\n            description: description,\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n          });\r\n          success();\r\n          props.setEdit(false);\r\n        }\r\n      }\r\n    } else {\r\n      props.notify(\"Please enter all fields, description (optional)\", \"error\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className=\"add-task-form\">\r\n        <div className=\"input-container\">\r\n          <div className=\"input-task-title\">\r\n            <Input\r\n              type=\"text\"\r\n              value={taskName}\r\n              placeholder=\"Enter task title\"\r\n              handleChange={setTaskName}\r\n            />\r\n          </div>\r\n          <textarea\r\n            rows=\"5\"\r\n            value={description}\r\n            placeholder=\"Enter task description (optional)\"\r\n            onChange={(e) => setDescription(e.target.value)}\r\n          ></textarea>\r\n        </div>\r\n        <div className=\"date-container\">\r\n          <div className=\"input-date\">\r\n            <div className=\"text-date\">\r\n              <h1>Start Date</h1>\r\n              <Input\r\n                type=\"date\"\r\n                value={startDate}\r\n                handleChange={setStartDate}\r\n              />\r\n            </div>\r\n            <div className=\"text-date\">\r\n              <h1>End Date</h1>\r\n              <Input type=\"date\" value={endDate} handleChange={setEndDate} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"btn-col-2\">\r\n          {props.edit ? (\r\n            <Button\r\n              label=\"Update Task\"\r\n              type=\"submit\"\r\n              className=\"button\"\r\n              handleClick={editTask}\r\n            />\r\n          ) : (\r\n            <Button\r\n              label=\"Add Task\"\r\n              type=\"submit\"\r\n              className=\"button\"\r\n              handleClick={addTask}\r\n            />\r\n          )}\r\n          <Button\r\n            label=\"cancel\"\r\n            type=\"button\"\r\n            className=\"button cancel\"\r\n            handleClick={cancel}\r\n          />\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskModal;\r\n"]},"metadata":{},"sourceType":"module"}