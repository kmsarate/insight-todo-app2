{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\Insight-todo-app2\\\\insight-todo-app2\\\\insight-todo-app-INS-016\\\\src\\\\pages\\\\Upcoming.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { useNavigate, useParams, render } from \"react-router-dom\";\nimport format from \"date-fns/format\";\nimport getDay from \"date-fns/getDay\";\nimport parse from \"date-fns/parse\";\nimport startOfWeek from \"date-fns/startOfWeek\";\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\nimport \"react-big-calendar/lib/css/react-big-calendar.css\"; // Components\n\nimport Menu from \"../components/Menu\";\nimport Navbar from \"../components/navbar\"; // db\n\nimport db from \"../utils/db\"; // Style\n\nimport \"../styles/upcoming.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Upcoming = props => {\n  _s();\n\n  const params = useParams();\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\n      navigate(\"/\");\n      props.setLoad(false);\n    } else {\n      props.setLoad(true);\n    }\n  }, [props.isLoggedIn, props.sessionId]);\n  const current = new Date();\n  const dateNow = `${current.getDate()}, ${current.getFullYear()}`;\n  const [month, setMonth] = useState(current.getMonth());\n  const [date, setDate] = useState(new Date());\n\n  const convertMonth = month => {\n    if (month === 0) setMonth(\"January\");else if (month === 1) setMonth(\"February\");else if (month === 2) setMonth(\"March\");else if (month === 3) setMonth(\"April\");else if (month === 4) setMonth(\"May\");else if (month === 5) setMonth(\"June\");else if (month === 6) setMonth(\"July\");else if (month === 7) setMonth(\"August\");else if (month === 8) setMonth(\"September\");else if (month === 9) setMonth(\"October\");else if (month === 10) setMonth(\"November\");else if (month === 11) setMonth(\"December\");\n  };\n\n  const locales = {\n    \"en-US\": require(\"date-fns/locale/en-US\")\n  };\n  const localizer = dateFnsLocalizer({\n    format,\n    parse,\n    startOfWeek,\n    getDay,\n    locales\n  });\n  const events = [{\n    title: \"National Elections\",\n    allDay: true,\n    start: new Date(2022, 4, 9),\n    end: new Date(2022, 4, 9)\n  }]; // Functions\n\n  const [edit, setEdit] = useState(false);\n  const [editId, setEditId] = useState(0);\n  const userid = parseInt(params.id); // Modal\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalState, setModalState] = useState({\n    deleteModal: false\n  });\n  const [taskId, setTaskId] = useState();\n\n  const modalHandler = () => {\n    setEdit(false);\n    setShowModal(!showModal);\n  };\n\n  const [year] = useState(current.getFullYear());\n  const id = parseInt(params.id);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      sessionId: props.sessionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      modalHandler: modalHandler,\n      isLoggedInHandler: props.isLoggedInHandler,\n      setSessionId: props.setSessionId,\n      sessionId: props.sessionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upcoming-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"upcoming-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Calendar: Upcoming\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Calendar, {\n        localizer: localizer,\n        events: events,\n        startAccessor: \"start\",\n        endAccessor: \"end\",\n        style: {\n          height: 500,\n          margin: \"50px\",\n          marginTop: \"25px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Upcoming, \"OVuDoaS1RXxLYfTMdSEdP00qNmA=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Upcoming;\nexport default Upcoming;\n\nvar _c;\n\n$RefreshReg$(_c, \"Upcoming\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/Insight-todo-app2/insight-todo-app2/insight-todo-app-INS-016/src/pages/Upcoming.js"],"names":["React","useState","useEffect","useLiveQuery","useNavigate","useParams","render","format","getDay","parse","startOfWeek","Calendar","dateFnsLocalizer","Menu","Navbar","db","Upcoming","props","params","navigate","isLoggedIn","sessionId","setLoad","current","Date","dateNow","getDate","getFullYear","month","setMonth","getMonth","date","setDate","convertMonth","locales","require","localizer","events","title","allDay","start","end","edit","setEdit","editId","setEditId","userid","parseInt","id","showModal","setShowModal","modalState","setModalState","deleteModal","taskId","setTaskId","modalHandler","year","isLoggedInHandler","setSessionId","height","margin","marginTop"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,kBAA/C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,oBAA3C;AACA,OAAO,mDAAP,C,CAEA;;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;;AACA,OAAOC,EAAP,MAAe,aAAf,C,CAEA;;AACA,OAAO,wBAAP;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B,QAAMC,MAAM,GAAGb,SAAS,EAAxB;AACA,QAAMc,QAAQ,GAAGf,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,KAAK,CAACG,UAAN,KAAqB,KAArB,IAA8BH,KAAK,CAACI,SAAN,KAAoB,EAAtD,EAA0D;AACxDF,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACAF,MAAAA,KAAK,CAACK,OAAN,CAAc,KAAd;AACD,KAHD,MAGO;AACLL,MAAAA,KAAK,CAACK,OAAN,CAAc,IAAd;AACD;AACF,GAPQ,EAON,CAACL,KAAK,CAACG,UAAP,EAAmBH,KAAK,CAACI,SAAzB,CAPM,CAAT;AASA,QAAME,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,QAAMC,OAAO,GAAI,GAAEF,OAAO,CAACG,OAAR,EAAkB,KAAIH,OAAO,CAACI,WAAR,EAAsB,EAA/D;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAACsB,OAAO,CAACO,QAAR,EAAD,CAAlC;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB/B,QAAQ,CAAC,IAAIuB,IAAJ,EAAD,CAAhC;;AACA,QAAMS,YAAY,GAAIL,KAAD,IAAW;AAC9B,QAAIA,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,SAAD,CAAR,CAAjB,KACK,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,UAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,OAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,OAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,KAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,MAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,MAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,QAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,WAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,SAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,EAAd,EAAkBC,QAAQ,CAAC,UAAD,CAAR,CAAlB,KACA,IAAID,KAAK,KAAK,EAAd,EAAkBC,QAAQ,CAAC,UAAD,CAAR;AAExB,GAdD;;AAeA,QAAMK,OAAO,GAAG;AACd,aAASC,OAAO,CAAC,uBAAD;AADF,GAAhB;AAGA,QAAMC,SAAS,GAAGxB,gBAAgB,CAAC;AACjCL,IAAAA,MADiC;AAEjCE,IAAAA,KAFiC;AAGjCC,IAAAA,WAHiC;AAIjCF,IAAAA,MAJiC;AAKjC0B,IAAAA;AALiC,GAAD,CAAlC;AAQA,QAAMG,MAAM,GAAG,CACb;AACEC,IAAAA,KAAK,EAAE,oBADT;AAEEC,IAAAA,MAAM,EAAE,IAFV;AAGEC,IAAAA,KAAK,EAAE,IAAIhB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,CAHT;AAIEiB,IAAAA,GAAG,EAAE,IAAIjB,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB;AAJP,GADa,CAAf,CA3C0B,CAoDzB;;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkB1C,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAAC2C,MAAD,EAASC,SAAT,IAAsB5C,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM6C,MAAM,GAAGC,QAAQ,CAAC7B,MAAM,CAAC8B,EAAR,CAAvB,CAvDyB,CAyDzB;;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjD,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACkD,UAAD,EAAaC,aAAb,IAA8BnD,QAAQ,CAAC;AAC3CoD,IAAAA,WAAW,EAAE;AAD8B,GAAD,CAA5C;AAGA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBtD,QAAQ,EAApC;;AACA,QAAMuD,YAAY,GAAG,MAAM;AACzBb,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAO,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAHD;;AAKD,QAAM,CAACQ,IAAD,IAASxD,QAAQ,CAACsB,OAAO,CAACI,WAAR,EAAD,CAAvB;AAEA,QAAMqB,EAAE,GAAGD,QAAQ,CAAC7B,MAAM,CAAC8B,EAAR,CAAnB;AAEA,sBACE;AAAA,4BACA,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAE/B,KAAK,CAACI;AAAzB;AAAA;AAAA;AAAA;AAAA,YADA,eAEE,QAAC,IAAD;AACE,MAAA,YAAY,EAAEmC,YADhB;AAEE,MAAA,iBAAiB,EAAEvC,KAAK,CAACyC,iBAF3B;AAGE,MAAA,YAAY,EAAEzC,KAAK,CAAC0C,YAHtB;AAIE,MAAA,SAAS,EAAE1C,KAAK,CAACI;AAJnB;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAII,QAAC,QAAD;AAAU,QAAA,SAAS,EAAEe,SAArB;AAAgC,QAAA,MAAM,EAAEC,MAAxC;AAAgD,QAAA,aAAa,EAAC,OAA9D;AAAsE,QAAA,WAAW,EAAC,KAAlF;AAAwF,QAAA,KAAK,EAAE;AAAEuB,UAAAA,MAAM,EAAE,GAAV;AAAeC,UAAAA,MAAM,EAAE,MAAvB;AAA+BC,UAAAA,SAAS,EAAE;AAA1C;AAA/F;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA,kBADF;AAiBD,CAzFD;;GAAM9C,Q;UACWX,S,EACED,W;;;KAFbY,Q;AA2FN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { useNavigate, useParams, render } from \"react-router-dom\";\r\nimport format from \"date-fns/format\";\r\nimport getDay from \"date-fns/getDay\";\r\nimport parse from \"date-fns/parse\";\r\nimport startOfWeek from \"date-fns/startOfWeek\";\r\nimport { Calendar, dateFnsLocalizer } from \"react-big-calendar\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\n    \r\n// Components\r\nimport Menu from \"../components/Menu\";\r\nimport Navbar from \"../components/navbar\";\r\n\r\n// db\r\nimport db from \"../utils/db\";\r\n\r\n// Style\r\nimport \"../styles/upcoming.css\";\r\n\r\nconst Upcoming = (props) => {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\r\n      navigate(\"/\");\r\n      props.setLoad(false)\r\n    } else {\r\n      props.setLoad(true)\r\n    }\r\n  }, [props.isLoggedIn, props.sessionId]);\r\n\r\n  const current = new Date();\r\n  const dateNow = `${current.getDate()}, ${current.getFullYear()}`;\r\n  const [month, setMonth] = useState(current.getMonth());\r\n  const [date, setDate] = useState(new Date());\r\n  const convertMonth = (month) => {\r\n    if (month === 0) setMonth(\"January\");\r\n    else if (month === 1) setMonth(\"February\");\r\n    else if (month === 2) setMonth(\"March\");\r\n    else if (month === 3) setMonth(\"April\");\r\n    else if (month === 4) setMonth(\"May\");\r\n    else if (month === 5) setMonth(\"June\");\r\n    else if (month === 6) setMonth(\"July\");\r\n    else if (month === 7) setMonth(\"August\");\r\n    else if (month === 8) setMonth(\"September\");\r\n    else if (month === 9) setMonth(\"October\");\r\n    else if (month === 10) setMonth(\"November\");\r\n    else if (month === 11) setMonth(\"December\");\r\n    \r\n  };\r\n  const locales = {\r\n    \"en-US\": require(\"date-fns/locale/en-US\"),\r\n};\r\n  const localizer = dateFnsLocalizer({\r\n    format,\r\n    parse,\r\n    startOfWeek,\r\n    getDay,\r\n    locales,\r\n});\r\n\r\n  const events = [\r\n    {\r\n      title: \"National Elections\",\r\n      allDay: true,\r\n      start: new Date(2022, 4, 9),\r\n      end: new Date(2022, 4, 9),\r\n  },\r\n];\r\n\r\n   // Functions\r\n   const [edit, setEdit] = useState(false);\r\n   const [editId, setEditId] = useState(0);\r\n   const userid = parseInt(params.id);\r\n \r\n   // Modal\r\n   const [showModal, setShowModal] = useState(false);\r\n   const [modalState, setModalState] = useState({\r\n     deleteModal: false,\r\n   });\r\n   const [taskId, setTaskId] = useState();\r\n   const modalHandler = () => {\r\n     setEdit(false);\r\n     setShowModal(!showModal);\r\n   };\r\n   \r\n  const [year] = useState(current.getFullYear());\r\n\r\n  const id = parseInt(params.id);\r\n\r\n  return (\r\n    <>\r\n    <Navbar sessionId={props.sessionId}/>\r\n      <Menu\r\n        modalHandler={modalHandler} \r\n        isLoggedInHandler={props.isLoggedInHandler}\r\n        setSessionId={props.setSessionId}\r\n        sessionId={props.sessionId}\r\n      />\r\n      <div className=\"upcoming-container\">\r\n        <div className=\"upcoming-header\">\r\n          <h1>Calendar: Upcoming</h1>\r\n        </div>\r\n          <Calendar localizer={localizer} events={events} startAccessor=\"start\" endAccessor=\"end\" style={{ height: 500, margin: \"50px\", marginTop: \"25px\" }} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Upcoming;"]},"metadata":{},"sourceType":"module"}