{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\Insight-todo-app2\\\\insight-todo-app2\\\\insight-todo-app-INS-016\\\\src\\\\pages\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { useNavigate, useParams } from \"react-router-dom\"; // Components\n\nimport TaskModal from \"../components/TaskModal\";\nimport TaskList from \"../components/TaskList\";\nimport ConfirmationModal from \"../components/ConfirmationModal\";\nimport Menu from \"../components/Menu\";\nimport Navbar from \"../components/navbar\"; // db\n\nimport db from \"../utils/db\"; // Style\n\nimport \"../styles/Home.css\";\nimport Dropdown from \"../components/Dropdown\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = props => {\n  _s();\n\n  const params = useParams();\n  const navigate = useNavigate(); // Effects;\n\n  useEffect(() => {\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\n      navigate(\"/\");\n      props.setLoad(false);\n    } else {\n      props.setLoad(true);\n    }\n  }, [props.isLoggedIn, props.sessionId]); // Display Date\n\n  const current = new Date();\n  const dateNow = `${current.getDate()}, ${current.getFullYear()}`;\n  const [month, setMonth] = useState(current.getMonth());\n\n  const convertMonth = month => {\n    if (month === 0) setMonth(\"January\");else if (month === 1) setMonth(\"February\");else if (month === 2) setMonth(\"March\");else if (month === 3) setMonth(\"April\");else if (month === 4) setMonth(\"May\");else if (month === 5) setMonth(\"June\");else if (month === 6) setMonth(\"July\");else if (month === 7) setMonth(\"August\");else if (month === 8) setMonth(\"September\");else if (month === 9) setMonth(\"October\");else if (month === 10) setMonth(\"November\");else if (month === 11) setMonth(\"December\");\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [day, \", \", month, \" \", dateNow, \" \"]\n    }, void 0, true);\n  };\n\n  const [day, setDay] = useState(current.getDay());\n\n  const convertDay = day => {\n    if (day === 1) setDay(\"Monday\");else if (day === 2) setDay(\"Tuesday\");else if (day === 3) setDay(\"Wednesday\");else if (day === 4) setDay(\"Thursday\");else if (day === 5) setDay(\"Friday\");else if (day === 6) setDay(\"Saturday\");else if (day === 7) setDay(\"Sunday\");\n  }; // Functions\n\n\n  const [edit, setEdit] = useState(false);\n  const [editId, setEditId] = useState(0);\n  const userid = parseInt(params.id); // Modal\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalState, setModalState] = useState({\n    deleteModal: false\n  });\n  const [taskId, setTaskId] = useState();\n\n  const modalHandler = () => {\n    setEdit(false);\n    setShowModal(!showModal);\n  };\n\n  const [sortTaskBy, setSortTaskBy] = useState(\"taskname\"); // const taskList = useLiveQuery(\n  //   () => db.tasks.where(\"userid\").equals(userid).sortBy(sortTaskBy),\n  //   [sortTaskBy]\n  // );\n\n  const editHandler = _id => {\n    if (edit === false) modalHandler();\n    setEdit(true);\n    setEditId(_id);\n  };\n\n  const updateHandler = _id => {\n    props.taskList.forEach(task => {\n      if (task.taskid === _id) {\n        db.tasks.update(task.taskid, {\n          completed: !task.completed\n        });\n      }\n    });\n  };\n\n  const deleteHandler = _id => {\n    if (props.taskList !== undefined) {\n      props.taskList.forEach(task => {\n        if (task.taskid === _id) {\n          db.tasks.delete(task.taskid);\n          changeModalState(\"deleteModal\", false);\n          props.notify(\"Task Deleted\", \"success\");\n        }\n      });\n    }\n  };\n\n  const handleConfirmDelete = _id => {\n    changeModalState(\"deleteModal\", true);\n    setTaskId(_id);\n  };\n\n  const changeModalState = (action, value) => {\n    setModalState({ ...modalState,\n      [action]: value\n    });\n  };\n\n  const dropdownHandler = property => {\n    switch (property) {\n      case \"Title\":\n        property = \"taskname\";\n        break;\n\n      case \"Description\":\n        property = \"description\";\n        break;\n\n      case \"Start Date\":\n        property = \"startDate\";\n        break;\n\n      case \"End Date\":\n        property = \"endDate\";\n        break;\n    }\n\n    props.sortHandler(property);\n  };\n\n  const [filterState, setFilterState] = useState(true);\n\n  const filter = () => {\n    let tasks = [];\n\n    if (props.filter === \"filter\") {\n      if (props.taskList) {\n        props.taskList.forEach(todo => {\n          if (filterState === false) {\n            tasks = props.taskList.filter(todo => !todo.completed);\n          } else if (filterState === true) {\n            tasks = props.taskList.filter(todo => todo.completed);\n          }\n        });\n      }\n    } else {\n      tasks = [...props.taskList];\n    }\n\n    return tasks;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      sessionId: props.sessionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      modalHandler: modalHandler,\n      isLoggedInHandler: props.isLoggedInHandler,\n      setSessionId: props.setSessionId,\n      sessionId: props.sessionId,\n      filterChangeHandler: props.filterChangeHandler,\n      filter: props.filter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-bar-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\" \", props.filter === \"filter\" ? \"Filters\" : \"Tasks\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today-taskbar\",\n          children: props.filter === \"filter\" ? null : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: \"Today\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n              children: [convertDay(day), \" \", convertMonth(month)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n          items: [{\n            value: \"Title\",\n            id: 1\n          }, {\n            value: \"Description\",\n            id: 2\n          }, {\n            value: \"Start Date\",\n            id: 3\n          }, {\n            value: \"End Date\",\n            id: 4\n          }],\n          handleClick: dropdownHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), showModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n          modalHandler: modalHandler,\n          userid: userid,\n          notify: props.notify,\n          edit: edit,\n          setEdit: setEdit,\n          editId: editId,\n          taskList: props.taskList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TaskList, {\n            list: filter(),\n            updateHandler: updateHandler,\n            handleConfirmDelete: handleConfirmDelete,\n            editHandler: editHandler,\n            filter: props.filter,\n            filterState: filterState,\n            setFilterState: setFilterState\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n          header: \"Warning\",\n          body: \"Are you sure you want to delete this task?\",\n          onConfirm: () => deleteHandler(taskId),\n          onHide: () => changeModalState(\"deleteModal\", false),\n          isVisible: modalState.deleteModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"wvwfcce++ClkQmayl1BdDEI/iLM=\", false, function () {\n  return [useParams, useNavigate];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/Insight-todo-app2/insight-todo-app2/insight-todo-app-INS-016/src/pages/Home.js"],"names":["React","useState","useEffect","useLiveQuery","useNavigate","useParams","TaskModal","TaskList","ConfirmationModal","Menu","Navbar","db","Dropdown","Home","props","params","navigate","isLoggedIn","sessionId","setLoad","current","Date","dateNow","getDate","getFullYear","month","setMonth","getMonth","convertMonth","day","setDay","getDay","convertDay","edit","setEdit","editId","setEditId","userid","parseInt","id","showModal","setShowModal","modalState","setModalState","deleteModal","taskId","setTaskId","modalHandler","sortTaskBy","setSortTaskBy","editHandler","_id","updateHandler","taskList","forEach","task","taskid","tasks","update","completed","deleteHandler","undefined","delete","changeModalState","notify","handleConfirmDelete","action","value","dropdownHandler","property","sortHandler","filterState","setFilterState","filter","todo","isLoggedInHandler","setSessionId","filterChangeHandler"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,kBAAvC,C,CAEA;;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB,C,CAEA;;AACA,OAAOC,EAAP,MAAe,aAAf,C,CAEA;;AACA,OAAO,oBAAP;AACA,OAAOC,QAAP,MAAqB,wBAArB;;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AACtB,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAMW,QAAQ,GAAGZ,WAAW,EAA5B,CAFsB,CAGtB;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,KAAK,CAACG,UAAN,KAAqB,KAArB,IAA8BH,KAAK,CAACI,SAAN,KAAoB,EAAtD,EAA0D;AACxDF,MAAAA,QAAQ,CAAC,GAAD,CAAR;AACAF,MAAAA,KAAK,CAACK,OAAN,CAAc,KAAd;AACD,KAHD,MAGO;AACLL,MAAAA,KAAK,CAACK,OAAN,CAAc,IAAd;AACD;AACF,GAPQ,EAON,CAACL,KAAK,CAACG,UAAP,EAAmBH,KAAK,CAACI,SAAzB,CAPM,CAAT,CAJsB,CAatB;;AACA,QAAME,OAAO,GAAG,IAAIC,IAAJ,EAAhB;AACA,QAAMC,OAAO,GAAI,GAAEF,OAAO,CAACG,OAAR,EAAkB,KAAIH,OAAO,CAACI,WAAR,EAAsB,EAA/D;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAACmB,OAAO,CAACO,QAAR,EAAD,CAAlC;;AACA,QAAMC,YAAY,GAAIH,KAAD,IAAW;AAC9B,QAAIA,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,SAAD,CAAR,CAAjB,KACK,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,UAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,OAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,OAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,KAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,MAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,MAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,QAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,WAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,CAAd,EAAiBC,QAAQ,CAAC,SAAD,CAAR,CAAjB,KACA,IAAID,KAAK,KAAK,EAAd,EAAkBC,QAAQ,CAAC,UAAD,CAAR,CAAlB,KACA,IAAID,KAAK,KAAK,EAAd,EAAkBC,QAAQ,CAAC,UAAD,CAAR;AAEvB,wBACE;AAAA,iBACGG,GADH,QACUJ,KADV,OACkBH,OADlB,EAC2B,GAD3B;AAAA,oBADF;AAKD,GAnBD;;AAoBA,QAAM,CAACO,GAAD,EAAMC,MAAN,IAAgB7B,QAAQ,CAACmB,OAAO,CAACW,MAAR,EAAD,CAA9B;;AACA,QAAMC,UAAU,GAAIH,GAAD,IAAS;AAC1B,QAAIA,GAAG,KAAK,CAAZ,EAAeC,MAAM,CAAC,QAAD,CAAN,CAAf,KACK,IAAID,GAAG,KAAK,CAAZ,EAAeC,MAAM,CAAC,SAAD,CAAN,CAAf,KACA,IAAID,GAAG,KAAK,CAAZ,EAAeC,MAAM,CAAC,WAAD,CAAN,CAAf,KACA,IAAID,GAAG,KAAK,CAAZ,EAAeC,MAAM,CAAC,UAAD,CAAN,CAAf,KACA,IAAID,GAAG,KAAK,CAAZ,EAAeC,MAAM,CAAC,QAAD,CAAN,CAAf,KACA,IAAID,GAAG,KAAK,CAAZ,EAAeC,MAAM,CAAC,UAAD,CAAN,CAAf,KACA,IAAID,GAAG,KAAK,CAAZ,EAAeC,MAAM,CAAC,QAAD,CAAN;AACrB,GARD,CAtCsB,CAgDtB;;;AACA,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBjC,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAM,CAACkC,MAAD,EAASC,SAAT,IAAsBnC,QAAQ,CAAC,CAAD,CAApC;AACA,QAAMoC,MAAM,GAAGC,QAAQ,CAACvB,MAAM,CAACwB,EAAR,CAAvB,CAnDsB,CAqDtB;;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BxC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACyC,UAAD,EAAaC,aAAb,IAA8B1C,QAAQ,CAAC;AAC3C2C,IAAAA,WAAW,EAAE;AAD8B,GAAD,CAA5C;AAGA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB7C,QAAQ,EAApC;;AACA,QAAM8C,YAAY,GAAG,MAAM;AACzBb,IAAAA,OAAO,CAAC,KAAD,CAAP;AACAO,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD,GAHD;;AAIA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BhD,QAAQ,CAAC,UAAD,CAA5C,CA/DsB,CAiEtB;AACA;AACA;AACA;;AAEA,QAAMiD,WAAW,GAAIC,GAAD,IAAS;AAC3B,QAAIlB,IAAI,KAAK,KAAb,EAAoBc,YAAY;AAChCb,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAE,IAAAA,SAAS,CAACe,GAAD,CAAT;AACD,GAJD;;AAMA,QAAMC,aAAa,GAAID,GAAD,IAAS;AAC7BrC,IAAAA,KAAK,CAACuC,QAAN,CAAeC,OAAf,CAAwBC,IAAD,IAAU;AAC/B,UAAIA,IAAI,CAACC,MAAL,KAAgBL,GAApB,EAAyB;AACvBxC,QAAAA,EAAE,CAAC8C,KAAH,CAASC,MAAT,CAAgBH,IAAI,CAACC,MAArB,EAA6B;AAAEG,UAAAA,SAAS,EAAE,CAACJ,IAAI,CAACI;AAAnB,SAA7B;AACD;AACF,KAJD;AAKD,GAND;;AAQA,QAAMC,aAAa,GAAIT,GAAD,IAAS;AAC7B,QAAIrC,KAAK,CAACuC,QAAN,KAAmBQ,SAAvB,EAAkC;AAChC/C,MAAAA,KAAK,CAACuC,QAAN,CAAeC,OAAf,CAAwBC,IAAD,IAAU;AAC/B,YAAIA,IAAI,CAACC,MAAL,KAAgBL,GAApB,EAAyB;AACvBxC,UAAAA,EAAE,CAAC8C,KAAH,CAASK,MAAT,CAAgBP,IAAI,CAACC,MAArB;AACAO,UAAAA,gBAAgB,CAAC,aAAD,EAAgB,KAAhB,CAAhB;AACAjD,UAAAA,KAAK,CAACkD,MAAN,CAAa,cAAb,EAA6B,SAA7B;AACD;AACF,OAND;AAOD;AACF,GAVD;;AAYA,QAAMC,mBAAmB,GAAId,GAAD,IAAS;AACnCY,IAAAA,gBAAgB,CAAC,aAAD,EAAgB,IAAhB,CAAhB;AACAjB,IAAAA,SAAS,CAACK,GAAD,CAAT;AACD,GAHD;;AAKA,QAAMY,gBAAgB,GAAG,CAACG,MAAD,EAASC,KAAT,KAAmB;AAC1CxB,IAAAA,aAAa,CAAC,EACZ,GAAGD,UADS;AAEZ,OAACwB,MAAD,GAAUC;AAFE,KAAD,CAAb;AAID,GALD;;AAOA,QAAMC,eAAe,GAAIC,QAAD,IAAc;AACpC,YAAQA,QAAR;AACE,WAAK,OAAL;AACEA,QAAAA,QAAQ,GAAG,UAAX;AACA;;AACF,WAAK,aAAL;AACEA,QAAAA,QAAQ,GAAG,aAAX;AACA;;AACF,WAAK,YAAL;AACEA,QAAAA,QAAQ,GAAG,WAAX;AACA;;AACF,WAAK,UAAL;AACEA,QAAAA,QAAQ,GAAG,SAAX;AACA;AAZJ;;AAcAvD,IAAAA,KAAK,CAACwD,WAAN,CAAkBD,QAAlB;AACD,GAhBD;;AAkBA,QAAM,CAACE,WAAD,EAAcC,cAAd,IAAgCvE,QAAQ,CAAC,IAAD,CAA9C;;AACA,QAAMwE,MAAM,GAAG,MAAM;AACnB,QAAIhB,KAAK,GAAG,EAAZ;;AACA,QAAI3C,KAAK,CAAC2D,MAAN,KAAiB,QAArB,EAA+B;AAC7B,UAAI3D,KAAK,CAACuC,QAAV,EAAoB;AAClBvC,QAAAA,KAAK,CAACuC,QAAN,CAAeC,OAAf,CAAwBoB,IAAD,IAAU;AAC/B,cAAIH,WAAW,KAAK,KAApB,EAA2B;AACzBd,YAAAA,KAAK,GAAG3C,KAAK,CAACuC,QAAN,CAAeoB,MAAf,CAAuBC,IAAD,IAAU,CAACA,IAAI,CAACf,SAAtC,CAAR;AACD,WAFD,MAEO,IAAIY,WAAW,KAAK,IAApB,EAA0B;AAC/Bd,YAAAA,KAAK,GAAG3C,KAAK,CAACuC,QAAN,CAAeoB,MAAf,CAAuBC,IAAD,IAAUA,IAAI,CAACf,SAArC,CAAR;AACD;AACF,SAND;AAOD;AACF,KAVD,MAUO;AACLF,MAAAA,KAAK,GAAG,CAAC,GAAG3C,KAAK,CAACuC,QAAV,CAAR;AACD;;AACD,WAAOI,KAAP;AACD,GAhBD;;AAkBA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,SAAS,EAAE3C,KAAK,CAACI;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AACE,MAAA,YAAY,EAAE6B,YADhB;AAEE,MAAA,iBAAiB,EAAEjC,KAAK,CAAC6D,iBAF3B;AAGE,MAAA,YAAY,EAAE7D,KAAK,CAAC8D,YAHtB;AAIE,MAAA,SAAS,EAAE9D,KAAK,CAACI,SAJnB;AAKE,MAAA,mBAAmB,EAAEJ,KAAK,CAAC+D,mBAL7B;AAME,MAAA,MAAM,EAAE/D,KAAK,CAAC2D;AANhB;AAAA;AAAA;AAAA;AAAA,YAFF,eAUE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE;AAAA,0BAAM3D,KAAK,CAAC2D,MAAN,KAAiB,QAAjB,GAA4B,SAA5B,GAAwC,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,oBACG3D,KAAK,CAAC2D,MAAN,KAAiB,QAAjB,GAA4B,IAA5B,gBACC;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,yBACGzC,UAAU,CAACH,GAAD,CADb,OACqBD,YAAY,CAACH,KAAD,CADjC;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,gBAFF,eAaE,QAAC,QAAD;AACE,UAAA,KAAK,EAAE,CACL;AAAE0C,YAAAA,KAAK,EAAE,OAAT;AAAkB5B,YAAAA,EAAE,EAAE;AAAtB,WADK,EAEL;AAAE4B,YAAAA,KAAK,EAAE,aAAT;AAAwB5B,YAAAA,EAAE,EAAE;AAA5B,WAFK,EAGL;AAAE4B,YAAAA,KAAK,EAAE,YAAT;AAAuB5B,YAAAA,EAAE,EAAE;AAA3B,WAHK,EAIL;AAAE4B,YAAAA,KAAK,EAAE,UAAT;AAAqB5B,YAAAA,EAAE,EAAE;AAAzB,WAJK,CADT;AAOE,UAAA,WAAW,EAAE6B;AAPf;AAAA;AAAA;AAAA;AAAA,gBAbF,EAsBG5B,SAAS,gBACR,QAAC,SAAD;AACE,UAAA,YAAY,EAAEO,YADhB;AAEE,UAAA,MAAM,EAAEV,MAFV;AAGE,UAAA,MAAM,EAAEvB,KAAK,CAACkD,MAHhB;AAIE,UAAA,IAAI,EAAE/B,IAJR;AAKE,UAAA,OAAO,EAAEC,OALX;AAME,UAAA,MAAM,EAAEC,MANV;AAOE,UAAA,QAAQ,EAAErB,KAAK,CAACuC;AAPlB;AAAA;AAAA;AAAA;AAAA,gBADQ,GAUN,IAhCN,eAiCE;AAAA,iCACE,QAAC,QAAD;AACE,YAAA,IAAI,EAAEoB,MAAM,EADd;AAEE,YAAA,aAAa,EAAErB,aAFjB;AAGE,YAAA,mBAAmB,EAAEa,mBAHvB;AAIE,YAAA,WAAW,EAAEf,WAJf;AAKE,YAAA,MAAM,EAAEpC,KAAK,CAAC2D,MALhB;AAME,YAAA,WAAW,EAAEF,WANf;AAOE,YAAA,cAAc,EAAEC;AAPlB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAjCF,eA4CE,QAAC,iBAAD;AACE,UAAA,MAAM,EAAC,SADT;AAEE,UAAA,IAAI,EAAC,4CAFP;AAGE,UAAA,SAAS,EAAE,MAAMZ,aAAa,CAACf,MAAD,CAHhC;AAIE,UAAA,MAAM,EAAE,MAAMkB,gBAAgB,CAAC,aAAD,EAAgB,KAAhB,CAJhC;AAKE,UAAA,SAAS,EAAErB,UAAU,CAACE;AALxB;AAAA;AAAA;AAAA;AAAA,gBA5CF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA,kBADF;AAmED,CApND;;GAAM/B,I;UACWR,S,EACED,W;;;KAFbS,I;AAsNN,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n// Components\r\nimport TaskModal from \"../components/TaskModal\";\r\nimport TaskList from \"../components/TaskList\";\r\nimport ConfirmationModal from \"../components/ConfirmationModal\";\r\nimport Menu from \"../components/Menu\";\r\nimport Navbar from \"../components/navbar\";\r\n\r\n// db\r\nimport db from \"../utils/db\";\r\n\r\n// Style\r\nimport \"../styles/Home.css\";\r\nimport Dropdown from \"../components/Dropdown\";\r\n\r\nconst Home = (props) => {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n  // Effects;\r\n  useEffect(() => {\r\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\r\n      navigate(\"/\");\r\n      props.setLoad(false);\r\n    } else {\r\n      props.setLoad(true);\r\n    }\r\n  }, [props.isLoggedIn, props.sessionId]);\r\n\r\n  // Display Date\r\n  const current = new Date();\r\n  const dateNow = `${current.getDate()}, ${current.getFullYear()}`;\r\n  const [month, setMonth] = useState(current.getMonth());\r\n  const convertMonth = (month) => {\r\n    if (month === 0) setMonth(\"January\");\r\n    else if (month === 1) setMonth(\"February\");\r\n    else if (month === 2) setMonth(\"March\");\r\n    else if (month === 3) setMonth(\"April\");\r\n    else if (month === 4) setMonth(\"May\");\r\n    else if (month === 5) setMonth(\"June\");\r\n    else if (month === 6) setMonth(\"July\");\r\n    else if (month === 7) setMonth(\"August\");\r\n    else if (month === 8) setMonth(\"September\");\r\n    else if (month === 9) setMonth(\"October\");\r\n    else if (month === 10) setMonth(\"November\");\r\n    else if (month === 11) setMonth(\"December\");\r\n\r\n    return (\r\n      <>\r\n        {day}, {month} {dateNow}{\" \"}\r\n      </>\r\n    );\r\n  };\r\n  const [day, setDay] = useState(current.getDay());\r\n  const convertDay = (day) => {\r\n    if (day === 1) setDay(\"Monday\");\r\n    else if (day === 2) setDay(\"Tuesday\");\r\n    else if (day === 3) setDay(\"Wednesday\");\r\n    else if (day === 4) setDay(\"Thursday\");\r\n    else if (day === 5) setDay(\"Friday\");\r\n    else if (day === 6) setDay(\"Saturday\");\r\n    else if (day === 7) setDay(\"Sunday\");\r\n  };\r\n\r\n  // Functions\r\n  const [edit, setEdit] = useState(false);\r\n  const [editId, setEditId] = useState(0);\r\n  const userid = parseInt(params.id);\r\n\r\n  // Modal\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalState, setModalState] = useState({\r\n    deleteModal: false,\r\n  });\r\n  const [taskId, setTaskId] = useState();\r\n  const modalHandler = () => {\r\n    setEdit(false);\r\n    setShowModal(!showModal);\r\n  };\r\n  const [sortTaskBy, setSortTaskBy] = useState(\"taskname\");\r\n\r\n  // const taskList = useLiveQuery(\r\n  //   () => db.tasks.where(\"userid\").equals(userid).sortBy(sortTaskBy),\r\n  //   [sortTaskBy]\r\n  // );\r\n\r\n  const editHandler = (_id) => {\r\n    if (edit === false) modalHandler();\r\n    setEdit(true);\r\n    setEditId(_id);\r\n  };\r\n\r\n  const updateHandler = (_id) => {\r\n    props.taskList.forEach((task) => {\r\n      if (task.taskid === _id) {\r\n        db.tasks.update(task.taskid, { completed: !task.completed });\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteHandler = (_id) => {\r\n    if (props.taskList !== undefined) {\r\n      props.taskList.forEach((task) => {\r\n        if (task.taskid === _id) {\r\n          db.tasks.delete(task.taskid);\r\n          changeModalState(\"deleteModal\", false);\r\n          props.notify(\"Task Deleted\", \"success\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleConfirmDelete = (_id) => {\r\n    changeModalState(\"deleteModal\", true);\r\n    setTaskId(_id);\r\n  };\r\n\r\n  const changeModalState = (action, value) => {\r\n    setModalState({\r\n      ...modalState,\r\n      [action]: value,\r\n    });\r\n  };\r\n\r\n  const dropdownHandler = (property) => {\r\n    switch (property) {\r\n      case \"Title\":\r\n        property = \"taskname\";\r\n        break;\r\n      case \"Description\":\r\n        property = \"description\";\r\n        break;\r\n      case \"Start Date\":\r\n        property = \"startDate\";\r\n        break;\r\n      case \"End Date\":\r\n        property = \"endDate\";\r\n        break;\r\n    }\r\n    props.sortHandler(property);\r\n  };\r\n\r\n  const [filterState, setFilterState] = useState(true);\r\n  const filter = () => {\r\n    let tasks = [];\r\n    if (props.filter === \"filter\") {\r\n      if (props.taskList) {\r\n        props.taskList.forEach((todo) => {\r\n          if (filterState === false) {\r\n            tasks = props.taskList.filter((todo) => !todo.completed);\r\n          } else if (filterState === true) {\r\n            tasks = props.taskList.filter((todo) => todo.completed);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      tasks = [...props.taskList];\r\n    }\r\n    return tasks;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Navbar sessionId={props.sessionId} />\r\n      <Menu\r\n        modalHandler={modalHandler}\r\n        isLoggedInHandler={props.isLoggedInHandler}\r\n        setSessionId={props.setSessionId}\r\n        sessionId={props.sessionId}\r\n        filterChangeHandler={props.filterChangeHandler}\r\n        filter={props.filter}\r\n      />\r\n      <div className=\"home-container\">\r\n        <div className=\"task-bar-header\">\r\n          <h1> {props.filter === \"filter\" ? \"Filters\" : \"Tasks\" }</h1>\r\n          <div className=\"today-taskbar\">\r\n            {props.filter === \"filter\" ? null : (\r\n              <>\r\n                <h1>Today</h1>\r\n                <h5>\r\n                  {convertDay(day)} {convertMonth(month)}\r\n                </h5>\r\n              </>\r\n            )}\r\n          </div>\r\n      \r\n          <Dropdown\r\n            items={[\r\n              { value: \"Title\", id: 1 },\r\n              { value: \"Description\", id: 2 },\r\n              { value: \"Start Date\", id: 3 },\r\n              { value: \"End Date\", id: 4 },\r\n            ]}\r\n            handleClick={dropdownHandler}\r\n          />\r\n          {showModal ? (\r\n            <TaskModal\r\n              modalHandler={modalHandler}\r\n              userid={userid}\r\n              notify={props.notify}\r\n              edit={edit}\r\n              setEdit={setEdit}\r\n              editId={editId}\r\n              taskList={props.taskList}\r\n            />\r\n          ) : null}\r\n          <div>\r\n            <TaskList\r\n              list={filter()}\r\n              updateHandler={updateHandler}\r\n              handleConfirmDelete={handleConfirmDelete}\r\n              editHandler={editHandler}\r\n              filter={props.filter}\r\n              filterState={filterState}\r\n              setFilterState={setFilterState}\r\n            />\r\n          </div>\r\n          <ConfirmationModal\r\n            header=\"Warning\"\r\n            body=\"Are you sure you want to delete this task?\"\r\n            onConfirm={() => deleteHandler(taskId)}\r\n            onHide={() => changeModalState(\"deleteModal\", false)}\r\n            isVisible={modalState.deleteModal}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}