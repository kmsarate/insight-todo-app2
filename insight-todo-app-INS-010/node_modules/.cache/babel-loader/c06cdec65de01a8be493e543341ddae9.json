{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\Insight-todo-app2\\\\insight-todo-app2\\\\insight-todo-app-ins-010\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\"; // Pages\n\nimport Home from \"./pages/Home\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/login\"; //Style\n\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntoast.configure();\n\nconst App = () => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\n    const loggedIn = sessionStorage.getItem(\"isLoggedIn\");\n    return loggedIn ? JSON.parse(loggedIn) : [];\n  });\n  const [sessionId, setSessionId] = useState(() => {\n    const id = sessionStorage.getItem(\"sessionId\");\n    return id ? JSON.parse(id) : [];\n  });\n\n  const notify = (_message, _state) => {\n    if (_state === \"error\") toast.error(_message);else if (_state === \"success\") toast.success(_message);\n  };\n\n  const isLoggedInHandler = () => {\n    setIsLoggedIn(!isLoggedIn);\n  };\n\n  const [filter, setFilter] = useState(\"today\");\n\n  const filterHandler = () => {\n    let tasks = [];\n    return tasks;\n  }; // Effect\n\n\n  useEffect(() => {\n    sessionStorage.setItem(\"isLoggedIn\", JSON.stringify(isLoggedIn));\n    sessionStorage.setItem(\"sessionId\", JSON.stringify(sessionId));\n  }, [isLoggedIn, sessionId]);\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Login, {\n            isLoggedInHandler: isLoggedInHandler,\n            isLoggedIn: isLoggedIn,\n            setSessionId: setSessionId,\n            sessionId: sessionId,\n            notify: notify\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/:id\",\n          element: /*#__PURE__*/_jsxDEV(Home, {\n            sessionId: sessionId,\n            setSessionId: setSessionId,\n            isLoggedIn: isLoggedIn,\n            isLoggedInHandler: isLoggedInHandler,\n            notify: notify\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/signup\",\n          element: /*#__PURE__*/_jsxDEV(Signup, {\n            notify: notify\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 42\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"XcZ2MUIKOdXpSRDmWJ5osG7bRNQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/Insight-todo-app2/insight-todo-app2/insight-todo-app-ins-010/src/App.js"],"names":["BrowserRouter","Router","Routes","Route","useState","useEffect","toast","Home","Signup","Login","configure","App","isLoggedIn","setIsLoggedIn","loggedIn","sessionStorage","getItem","JSON","parse","sessionId","setSessionId","id","notify","_message","_state","error","success","isLoggedInHandler","filter","setFilter","filterHandler","tasks","setItem","stringify"],"mappings":"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","sourcesContent":["import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\"\r\nimport \"react-toastify/dist/ReactToastify.css\"\r\n\r\n// Pages\r\nimport Home from \"./pages/Home\";\r\nimport Signup from \"./pages/Signup\";\r\nimport Login from \"./pages/login\";\r\n\r\n//Style\r\nimport \"./App.css\";\r\n\r\ntoast.configure()\r\n\r\nconst App = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(() => {\r\n    const loggedIn = sessionStorage.getItem(\"isLoggedIn\");\r\n    return loggedIn ? JSON.parse(loggedIn) : [];\r\n  });\r\n  const [sessionId, setSessionId] = useState(() => {\r\n    const id = sessionStorage.getItem(\"sessionId\");\r\n    return id ? JSON.parse(id) : [];\r\n  });\r\n\r\n  const notify = (_message, _state) => {\r\n    if (_state === \"error\") toast.error(_message)\r\n    else if (_state === \"success\") toast.success(_message)\r\n  }\r\n\r\n  const isLoggedInHandler = () => {\r\n    setIsLoggedIn(!isLoggedIn);\r\n  };\r\n\r\n  const [filter, setFilter] = useState(\"today\");\r\n\r\n  const filterHandler = () => {\r\n    let tasks = [];\r\n\r\n    return tasks;\r\n  };\r\n\r\n  // Effect\r\n  useEffect(() => {\r\n    sessionStorage.setItem(\"isLoggedIn\", JSON.stringify(isLoggedIn))\r\n    sessionStorage.setItem(\"sessionId\", JSON.stringify(sessionId));\r\n  }, [isLoggedIn, sessionId]);\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route\r\n            path=\"/\"\r\n            element={\r\n              <Login\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                isLoggedIn={isLoggedIn}\r\n                setSessionId={setSessionId}\r\n                sessionId={sessionId}\r\n                notify={notify}\r\n              />\r\n            }\r\n          />\r\n          <Route\r\n            path=\"/:id\"\r\n            element={\r\n              <Home\r\n                sessionId={sessionId}\r\n                setSessionId={setSessionId}\r\n                isLoggedIn={isLoggedIn}\r\n                isLoggedInHandler={isLoggedInHandler}\r\n                notify={notify}\r\n              />\r\n            }\r\n          />\r\n          <Route path=\"/signup\" element={<Signup notify={notify} />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}