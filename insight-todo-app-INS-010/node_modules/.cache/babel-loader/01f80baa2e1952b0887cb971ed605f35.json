{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\Insight-todo-app2\\\\insight-todo-app2\\\\insight-todo-app-ins-010\\\\src\\\\pages\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useLiveQuery } from \"dexie-react-hooks\";\nimport { useNavigate, useParams } from \"react-router-dom\"; // Components\n\nimport TaskModal from \"../components/TaskModal\";\nimport TaskList from \"../components/TaskList\";\nimport ConfirmationModal from \"../components/ConfirmationModal\";\nimport Menu from \"../components/Menu\";\nimport Navbar from \"../components/navbar\"; // db\n\nimport db from \"../utils/db\"; // Style\n\nimport \"../styles/Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = props => {\n  _s();\n\n  const params = useParams();\n  const navigate = useNavigate(); // Effects\n\n  useEffect(() => {\n    // checked if isLoggedIn is false then redirect to / page\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\n      navigate(\"/\");\n    }\n  }, [navigate, props.isLoggedIn, props.sessionId]); // Display Date\n\n  const current = new Date();\n  const dateNow = `${current.getDate()}, ${current.getFullYear()}`;\n  const [month, setMonth] = useState(current.getMonth());\n\n  const convertMonth = month => {\n    if (month === 0) setMonth(\"January\");else if (month === 1) setMonth(\"February\");else if (month === 2) setMonth(\"March\");else if (month === 3) setMonth(\"April\");else if (month === 4) setMonth(\"May\");else if (month === 5) setMonth(\"June\");else if (month === 6) setMonth(\"July\");else if (month === 7) setMonth(\"August\");else if (month === 8) setMonth(\"September\");else if (month === 9) setMonth(\"October\");else if (month === 10) setMonth(\"November\");else if (month === 11) setMonth(\"December\");\n    return /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: [day, \", \", month, \" \", dateNow, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  };\n\n  const [day, setDay] = useState(current.getDay());\n\n  const convertDay = day => {\n    if (day === 1) setDay(\"Monday\");else if (day === 2) setDay(\"Tuesday\");else if (day === 3) setDay(\"Wednesday\");else if (day === 4) setDay(\"Thursday\");else if (day === 5) setDay(\"Friday\");else if (day === 6) setDay(\"Saturday\");else if (day === 7) setDay(\"Sunday\");\n  }; // Functions\n\n\n  const [edit, setEdit] = useState(false);\n  const [editId, setEditId] = useState(0);\n  const userid = parseInt(params.id); // Modal\n\n  const [showModal, setShowModal] = useState(false);\n  const [modalState, setModalState] = useState({\n    deleteModal: false\n  });\n  const [taskId, setTaskId] = useState();\n\n  const modalHandler = () => {\n    setEdit(false);\n    setShowModal(!showModal);\n  };\n\n  const taskList = useLiveQuery(() => db.tasks.where(\"userid\").equals(userid).toArray());\n\n  const editHandler = _id => {\n    if (edit === false) modalHandler();\n    setEdit(true);\n    setEditId(_id);\n  };\n\n  const updateHandler = _id => {\n    taskList.forEach(task => {\n      if (task.taskid === _id) {\n        db.tasks.update(task.taskid, {\n          completed: !task.completed\n        });\n      }\n    });\n  };\n\n  const deleteHandler = _id => {\n    if (taskList !== undefined) {\n      taskList.forEach(task => {\n        if (task.taskid === _id) {\n          db.tasks.delete(task.taskid);\n          changeModalState('deleteModal', false);\n          props.notify(\"Task Deleted\", \"success\");\n        }\n      });\n    }\n  };\n\n  const handleConfirmDelete = _id => {\n    changeModalState('deleteModal', true);\n    setTaskId(_id);\n  };\n\n  const changeModalState = (action, value) => {\n    setModalState({ ...modalState,\n      [action]: value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      modalHandler: modalHandler,\n      isLoggedInHandler: props.isLoggedInHandler,\n      setSessionId: props.setSessionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-bar-header\",\n        children: [\"All tasks\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"today-taskbar\",\n          children: [\"Today\", /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: [convertDay(day), \" \", convertMonth(month)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this), showModal ? /*#__PURE__*/_jsxDEV(TaskModal, {\n          modalHandler: modalHandler,\n          userid: userid,\n          notify: props.notify,\n          edit: edit,\n          setEdit: setEdit,\n          editId: editId,\n          taskList: taskList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TaskList, {\n            list: taskList,\n            updateHandler: updateHandler,\n            handleConfirmDelete: handleConfirmDelete,\n            editHandler: editHandler\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n          onConfirm: () => deleteHandler(taskId),\n          onHide: () => changeModalState('deleteModal', false),\n          isVisible: modalState.deleteModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"ZPNcAayXznsDPlLN8Fs2ZCi31UQ=\", false, function () {\n  return [useParams, useNavigate, useLiveQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/User/OneDrive/Desktop/Insight-todo-app2/insight-todo-app2/insight-todo-app-ins-010/src/pages/Home.js"],"names":["React","useState","useEffect","useLiveQuery","useNavigate","useParams","TaskModal","TaskList","ConfirmationModal","Menu","Navbar","db","Home","props","params","navigate","isLoggedIn","sessionId","current","Date","dateNow","getDate","getFullYear","month","setMonth","getMonth","convertMonth","day","setDay","getDay","convertDay","edit","setEdit","editId","setEditId","userid","parseInt","id","showModal","setShowModal","modalState","setModalState","deleteModal","taskId","setTaskId","modalHandler","taskList","tasks","where","equals","toArray","editHandler","_id","updateHandler","forEach","task","taskid","update","completed","deleteHandler","undefined","delete","changeModalState","notify","handleConfirmDelete","action","value","isLoggedInHandler","setSessionId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useLiveQuery } from \"dexie-react-hooks\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\n// Components\r\nimport TaskModal from \"../components/TaskModal\";\r\nimport TaskList from \"../components/TaskList\";\r\nimport ConfirmationModal from \"../components/ConfirmationModal\";\r\nimport Menu from \"../components/Menu\";\r\nimport Navbar from \"../components/navbar\";\r\n\r\n// db\r\nimport db from \"../utils/db\";\r\n\r\n// Style\r\nimport \"../styles/Home.css\";\r\n\r\nconst Home = (props) => {\r\n  const params = useParams();\r\n  const navigate = useNavigate();\r\n\r\n  // Effects\r\n  useEffect(() => {\r\n    // checked if isLoggedIn is false then redirect to / page\r\n    if (props.isLoggedIn === false && props.sessionId === \"\") {\r\n      navigate(\"/\");\r\n    }\r\n  }, [navigate, props.isLoggedIn, props.sessionId]);\r\n\r\n  // Display Date\r\n  const current = new Date();\r\n  const dateNow = `${current.getDate()}, ${current.getFullYear()}`;\r\n  const [month, setMonth] = useState(current.getMonth());\r\n  const convertMonth = (month) => {\r\n    if (month === 0) setMonth(\"January\");\r\n    else if (month === 1) setMonth(\"February\");\r\n    else if (month === 2) setMonth(\"March\");\r\n    else if (month === 3) setMonth(\"April\");\r\n    else if (month === 4) setMonth(\"May\");\r\n    else if (month === 5) setMonth(\"June\");\r\n    else if (month === 6) setMonth(\"July\");\r\n    else if (month === 7) setMonth(\"August\");\r\n    else if (month === 8) setMonth(\"September\");\r\n    else if (month === 9) setMonth(\"October\");\r\n    else if (month === 10) setMonth(\"November\");\r\n    else if (month === 11) setMonth(\"December\");\r\n\r\n    return (\r\n      <h5>\r\n        {day}, {month} {dateNow}{\" \"}\r\n      </h5>\r\n    );\r\n  };\r\n  const [day, setDay] = useState(current.getDay());\r\n  const convertDay = (day) => {\r\n    if (day === 1) setDay(\"Monday\");\r\n    else if (day === 2) setDay(\"Tuesday\");\r\n    else if (day === 3) setDay(\"Wednesday\");\r\n    else if (day === 4) setDay(\"Thursday\");\r\n    else if (day === 5) setDay(\"Friday\");\r\n    else if (day === 6) setDay(\"Saturday\");\r\n    else if (day === 7) setDay(\"Sunday\");\r\n  };\r\n\r\n\r\n  // Functions\r\n  const [edit, setEdit] = useState(false);\r\n  const [editId, setEditId] = useState(0);\r\n  const userid = parseInt(params.id);\r\n\r\n  // Modal\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [modalState, setModalState] = useState(\r\n    {\r\n      deleteModal: false,\r\n    });\r\n  const [taskId, setTaskId] = useState();\r\n  const modalHandler = () => {\r\n    setEdit(false)\r\n    setShowModal(!showModal);\r\n  };\r\n\r\n  const taskList = useLiveQuery(() =>\r\n    db.tasks.where(\"userid\").equals(userid).toArray()\r\n  );\r\n  const editHandler = (_id) => {\r\n    if (edit === false) modalHandler();\r\n    setEdit(true);\r\n    setEditId(_id);\r\n  };\r\n\r\n  const updateHandler = (_id) => {\r\n    taskList.forEach((task) => {\r\n      if (task.taskid === _id) {\r\n        db.tasks.update(task.taskid, { completed: !task.completed });\r\n      }\r\n    });\r\n  };\r\n\r\n  const deleteHandler = (_id) => {\r\n    if(taskList !== undefined){\r\n      taskList.forEach((task) => {\r\n        if (task.taskid === _id) {\r\n          db.tasks.delete(task.taskid);\r\n          changeModalState('deleteModal', false);\r\n          props.notify(\"Task Deleted\", \"success\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleConfirmDelete = (_id) => {\r\n    changeModalState('deleteModal', true);\r\n    setTaskId(_id);\r\n  }\r\n\r\n  const changeModalState = (action, value) => {\r\n    setModalState({\r\n      ...modalState,\r\n      [action]: value,\r\n    })\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <Menu\r\n        modalHandler={modalHandler}\r\n        isLoggedInHandler={props.isLoggedInHandler}\r\n        setSessionId={props.setSessionId}\r\n      />\r\n      <div className=\"home-container\">\r\n        <div className=\"task-bar-header\">\r\n          All tasks\r\n          <div className=\"today-taskbar\">\r\n            Today\r\n            <h5>\r\n              {convertDay(day)} {convertMonth(month)}\r\n            </h5>\r\n          </div>\r\n          {showModal ? (\r\n            <TaskModal\r\n              modalHandler={modalHandler}\r\n              userid={userid}\r\n              notify={props.notify}\r\n              edit={edit}\r\n              setEdit={setEdit}\r\n              editId={editId}\r\n              taskList={taskList}\r\n            />\r\n          ) : null}\r\n          <div>\r\n            <TaskList\r\n              list={taskList}\r\n              updateHandler={updateHandler}\r\n              handleConfirmDelete={handleConfirmDelete}\r\n              editHandler={editHandler}\r\n            />\r\n          </div>\r\n          <ConfirmationModal\r\n             onConfirm={()=>deleteHandler(taskId)}\r\n             onHide={() => changeModalState('deleteModal', false)}\r\n             isVisible={modalState.deleteModal}\r\n             />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}